package com.data.log.dao.impl;

import com.base.database.DataReader;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;

import com.base.database.BaseDao;
import com.base.database.DBParamWrapper;
import com.base.database.DataExecutor;
import com.base.database.pool.DBHelper;


import com.data.log.dao.ILoginLogDao;
import com.data.log.LoginLog;



/**
 * This file is generated by system automatically.Don't Modify It.
 *
 * @author System
 */
public class LoginLogDaoImpl extends BaseDao<LoginLog> implements ILoginLogDao
{
	public LoginLogDaoImpl(DBHelper helper)
	{
		super(helper);
	}


	@Override
	public boolean add(LoginLog loginLog)
	{
		boolean result = false;
		String sql = "insert into t_l_login(`UserID`, `LogType`, `LogTime`, `UserLevel`, `OnlineTime`, `MachineID`, `LoginIP`, `ServerID`) values(?, ?, ?, ?, ?, ?, ?, ?);";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,loginLog.getUserID());
		params.put(Types.SMALLINT,loginLog.getLogType());
		params.put(Types.TIMESTAMP,loginLog.getLogTime());
		params.put(Types.INTEGER,loginLog.getUserLevel());
		params.put(Types.INTEGER,loginLog.getOnlineTime());
		params.put(Types.VARCHAR,loginLog.getMachineID());
		params.put(Types.VARCHAR,loginLog.getLoginIP());
		params.put(Types.INTEGER,loginLog.getServerID());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean update(LoginLog loginLog)
	{
		boolean result = false;
		String sql = "update t_l_login set `UserID`=?, `LogType`=?, `LogTime`=?, `UserLevel`=?, `OnlineTime`=?, `MachineID`=?, `LoginIP`=?, `ServerID`=? where `KeyID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,loginLog.getUserID());
		params.put(Types.SMALLINT,loginLog.getLogType());
		params.put(Types.TIMESTAMP,loginLog.getLogTime());
		params.put(Types.INTEGER,loginLog.getUserLevel());
		params.put(Types.INTEGER,loginLog.getOnlineTime());
		params.put(Types.VARCHAR,loginLog.getMachineID());
		params.put(Types.VARCHAR,loginLog.getLoginIP());
		params.put(Types.INTEGER,loginLog.getServerID());
		params.put(Types.INTEGER,loginLog.getKeyID());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean delete(LoginLog loginLog)
	{
		boolean result = false;
		String sql = "delete from t_l_login where `KeyID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,loginLog.getKeyID());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean addOrUpdate(LoginLog loginLog)
	{
		boolean result = false;
		String sql = "insert into t_l_login(`KeyID`, `UserID`, `LogType`, `LogTime`, `UserLevel`, `OnlineTime`, `MachineID`, `LoginIP`, `ServerID`) values(?, ?, ?, ?, ?, ?, ?, ?, ?) on DUPLICATE KEY update `UserID`=?,`LogType`=?,`LogTime`=?,`UserLevel`=?,`OnlineTime`=?,`MachineID`=?,`LoginIP`=?,`ServerID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,loginLog.getKeyID());
		params.put(Types.INTEGER,loginLog.getUserID());
		params.put(Types.SMALLINT,loginLog.getLogType());
		params.put(Types.TIMESTAMP,loginLog.getLogTime());
		params.put(Types.INTEGER,loginLog.getUserLevel());
		params.put(Types.INTEGER,loginLog.getOnlineTime());
		params.put(Types.VARCHAR,loginLog.getMachineID());
		params.put(Types.VARCHAR,loginLog.getLoginIP());
		params.put(Types.INTEGER,loginLog.getServerID());
		params.put(Types.INTEGER,loginLog.getUserID());
		params.put(Types.SMALLINT,loginLog.getLogType());
		params.put(Types.TIMESTAMP,loginLog.getLogTime());
		params.put(Types.INTEGER,loginLog.getUserLevel());
		params.put(Types.INTEGER,loginLog.getOnlineTime());
		params.put(Types.VARCHAR,loginLog.getMachineID());
		params.put(Types.VARCHAR,loginLog.getLoginIP());
		params.put(Types.INTEGER,loginLog.getServerID());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean deleteByKey(Object... ids)
	{
		boolean result = false;
		String sql = "delete from t_l_login where `KeyID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,ids[0]);
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public LoginLog getByKey(Object... ids)
	{
		String sql = "select * from t_l_login where `KeyID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,ids[0]);
		LoginLog loginLog = query(sql, params);		return loginLog;
	}


	@Override
	public List<LoginLog> listAll()
	{
		String sql = "select * from t_l_login;";
		List<LoginLog> loginLogs = queryList(sql);		return loginLogs;
	}

	@Override
	public int[] addOrUpdateBatch(List<LoginLog> loginLogs)
	{
		if (loginLogs == null || loginLogs.isEmpty())
			return new int[1];
		String sql = "insert into t_l_login(`KeyID`, `UserID`, `LogType`, `LogTime`, `UserLevel`, `OnlineTime`, `MachineID`, `LoginIP`, `ServerID`) values(?, ?, ?, ?, ?, ?, ?, ?, ?) on DUPLICATE KEY update `UserID`=?,`LogType`=?,`LogTime`=?,`UserLevel`=?,`OnlineTime`=?,`MachineID`=?,`LoginIP`=?,`ServerID`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, loginLogs, new DataExecutor<int[]>()
			{
				@Override
				public int[] execute(PreparedStatement statement, Object... objects) throws Exception
				{
					@SuppressWarnings("unchecked")
					List<LoginLog>loginLogs = (List<LoginLog>)objects[0];
					for (LoginLog loginLog : loginLogs)
					{
						DBParamWrapper params = new DBParamWrapper();
						params.put(Types.INTEGER,loginLog.getKeyID());
						params.put(Types.INTEGER,loginLog.getUserID());
						params.put(Types.SMALLINT,loginLog.getLogType());
						params.put(Types.TIMESTAMP,loginLog.getLogTime());
						params.put(Types.INTEGER,loginLog.getUserLevel());
						params.put(Types.INTEGER,loginLog.getOnlineTime());
						params.put(Types.VARCHAR,loginLog.getMachineID());
						params.put(Types.VARCHAR,loginLog.getLoginIP());
						params.put(Types.INTEGER,loginLog.getServerID());
						params.put(Types.INTEGER,loginLog.getUserID());
						params.put(Types.SMALLINT,loginLog.getLogType());
						params.put(Types.TIMESTAMP,loginLog.getLogTime());
						params.put(Types.INTEGER,loginLog.getUserLevel());
						params.put(Types.INTEGER,loginLog.getOnlineTime());
						params.put(Types.VARCHAR,loginLog.getMachineID());
						params.put(Types.VARCHAR,loginLog.getLoginIP());
						params.put(Types.INTEGER,loginLog.getServerID());
						statement = getDBHelper().prepareCommand(statement,params.getParams());
						statement.addBatch();
					}
					return statement.executeBatch();
				}
			});
		return effectedRows;
	}

	@Override
	public int[] deleteBatch(List<LoginLog> loginLogs)
	{
		String sql = "delete from t_l_login where `KeyID`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, loginLogs, new DataExecutor<int[]>()
		{
			@Override
		public int[] execute(PreparedStatement statement, Object... objects) throws Exception
		{
			
			@SuppressWarnings("unchecked")
			List<LoginLog>loginLogs = (List<LoginLog>)objects[0];
			for (LoginLog loginLog : loginLogs)
			{
					DBParamWrapper params = new DBParamWrapper();
					params.put(Types.INTEGER,loginLog.getKeyID());
					statement = getDBHelper().prepareCommand(statement,params.getParams());
					statement.addBatch();
				}
				return statement.executeBatch();
			}
		});
		return effectedRows;
	}
	@Override
	public LoginLog rsToEntity(ResultSet rs) throws SQLException
	{
		LoginLog loginLog = new LoginLog();
		loginLog.setKeyID(rs.getInt("KeyID"));
		loginLog.setUserID(rs.getInt("UserID"));
		loginLog.setLogType(rs.getShort("LogType"));
		loginLog.setLogTime(rs.getTimestamp("LogTime"));
		loginLog.setUserLevel(rs.getInt("UserLevel"));
		loginLog.setOnlineTime(rs.getInt("OnlineTime"));
		loginLog.setMachineID(rs.getString("MachineID"));
		loginLog.setLoginIP(rs.getString("LoginIP"));
		loginLog.setServerID(rs.getInt("ServerID"));
		return loginLog;
	}

	@Override
	public List<LoginLog> getLoginLogByUserID(int userID)
	{
		String sql = "select * from t_l_login where `userID` = ?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(userID);
		List<LoginLog> loginLog = queryList(sql,params);
		return loginLog;
	}

}