package com.data.log.dao.impl;

import com.base.database.DataReader;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;

import com.base.database.BaseDao;
import com.base.database.DBParamWrapper;
import com.base.database.DataExecutor;
import com.base.database.pool.DBHelper;


import com.data.log.dao.IResourceLogDao;
import com.data.log.ResourceLog;



/**
 * This file is generated by system automatically.Don't Modify It.
 *
 * @author System
 */
public class ResourceLogDaoImpl extends BaseDao<ResourceLog> implements IResourceLogDao
{
	public ResourceLogDaoImpl(DBHelper helper)
	{
		super(helper);
	}


	@Override
	public boolean add(ResourceLog resourceLog)
	{
		boolean result = false;
		String sql = "insert into t_l_resource(`UserID`, `ItemID`, `ItemCount`, `AddType`, `AddTime`) values(?, ?, ?, ?, ?);";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,resourceLog.getUserID());
		params.put(Types.INTEGER,resourceLog.getItemID());
		params.put(Types.INTEGER,resourceLog.getItemCount());
		params.put(Types.INTEGER,resourceLog.getAddType());
		params.put(Types.TIMESTAMP,resourceLog.getAddTime());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean update(ResourceLog resourceLog)
	{
		boolean result = false;
		String sql = "update t_l_resource set `UserID`=?, `ItemID`=?, `ItemCount`=?, `AddType`=?, `AddTime`=? where `KeyID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,resourceLog.getUserID());
		params.put(Types.INTEGER,resourceLog.getItemID());
		params.put(Types.INTEGER,resourceLog.getItemCount());
		params.put(Types.INTEGER,resourceLog.getAddType());
		params.put(Types.TIMESTAMP,resourceLog.getAddTime());
		params.put(Types.INTEGER,resourceLog.getKeyID());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean delete(ResourceLog resourceLog)
	{
		boolean result = false;
		String sql = "delete from t_l_resource where `KeyID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,resourceLog.getKeyID());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean addOrUpdate(ResourceLog resourceLog)
	{
		boolean result = false;
		String sql = "insert into t_l_resource(`KeyID`, `UserID`, `ItemID`, `ItemCount`, `AddType`, `AddTime`) values(?, ?, ?, ?, ?, ?) on DUPLICATE KEY update `UserID`=?,`ItemID`=?,`ItemCount`=?,`AddType`=?,`AddTime`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,resourceLog.getKeyID());
		params.put(Types.INTEGER,resourceLog.getUserID());
		params.put(Types.INTEGER,resourceLog.getItemID());
		params.put(Types.INTEGER,resourceLog.getItemCount());
		params.put(Types.INTEGER,resourceLog.getAddType());
		params.put(Types.TIMESTAMP,resourceLog.getAddTime());
		params.put(Types.INTEGER,resourceLog.getUserID());
		params.put(Types.INTEGER,resourceLog.getItemID());
		params.put(Types.INTEGER,resourceLog.getItemCount());
		params.put(Types.INTEGER,resourceLog.getAddType());
		params.put(Types.TIMESTAMP,resourceLog.getAddTime());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean deleteByKey(Object... ids)
	{
		boolean result = false;
		String sql = "delete from t_l_resource where `KeyID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,ids[0]);
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public ResourceLog getByKey(Object... ids)
	{
		String sql = "select * from t_l_resource where `KeyID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,ids[0]);
		ResourceLog resourceLog = query(sql, params);		return resourceLog;
	}


	@Override
	public List<ResourceLog> listAll()
	{
		String sql = "select * from t_l_resource;";
		List<ResourceLog> resourceLogs = queryList(sql);		return resourceLogs;
	}

	@Override
	public int[] addOrUpdateBatch(List<ResourceLog> resourceLogs)
	{
		if (resourceLogs == null || resourceLogs.isEmpty())
			return new int[1];
		String sql = "insert into t_l_resource(`KeyID`, `UserID`, `ItemID`, `ItemCount`, `AddType`, `AddTime`) values(?, ?, ?, ?, ?, ?) on DUPLICATE KEY update `UserID`=?,`ItemID`=?,`ItemCount`=?,`AddType`=?,`AddTime`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, resourceLogs, new DataExecutor<int[]>()
			{
				@Override
				public int[] execute(PreparedStatement statement, Object... objects) throws Exception
				{
					@SuppressWarnings("unchecked")
					List<ResourceLog>resourceLogs = (List<ResourceLog>)objects[0];
					for (ResourceLog resourceLog : resourceLogs)
					{
						DBParamWrapper params = new DBParamWrapper();
						params.put(Types.INTEGER,resourceLog.getKeyID());
						params.put(Types.INTEGER,resourceLog.getUserID());
						params.put(Types.INTEGER,resourceLog.getItemID());
						params.put(Types.INTEGER,resourceLog.getItemCount());
						params.put(Types.INTEGER,resourceLog.getAddType());
						params.put(Types.TIMESTAMP,resourceLog.getAddTime());
						params.put(Types.INTEGER,resourceLog.getUserID());
						params.put(Types.INTEGER,resourceLog.getItemID());
						params.put(Types.INTEGER,resourceLog.getItemCount());
						params.put(Types.INTEGER,resourceLog.getAddType());
						params.put(Types.TIMESTAMP,resourceLog.getAddTime());
						statement = getDBHelper().prepareCommand(statement,params.getParams());
						statement.addBatch();
					}
					return statement.executeBatch();
				}
			});
		return effectedRows;
	}

	@Override
	public int[] deleteBatch(List<ResourceLog> resourceLogs)
	{
		String sql = "delete from t_l_resource where `KeyID`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, resourceLogs, new DataExecutor<int[]>()
		{
			@Override
		public int[] execute(PreparedStatement statement, Object... objects) throws Exception
		{
			
			@SuppressWarnings("unchecked")
			List<ResourceLog>resourceLogs = (List<ResourceLog>)objects[0];
			for (ResourceLog resourceLog : resourceLogs)
			{
					DBParamWrapper params = new DBParamWrapper();
					params.put(Types.INTEGER,resourceLog.getKeyID());
					statement = getDBHelper().prepareCommand(statement,params.getParams());
					statement.addBatch();
				}
				return statement.executeBatch();
			}
		});
		return effectedRows;
	}
	@Override
	public ResourceLog rsToEntity(ResultSet rs) throws SQLException
	{
		ResourceLog resourceLog = new ResourceLog();
		resourceLog.setKeyID(rs.getInt("KeyID"));
		resourceLog.setUserID(rs.getInt("UserID"));
		resourceLog.setItemID(rs.getInt("ItemID"));
		resourceLog.setItemCount(rs.getInt("ItemCount"));
		resourceLog.setAddType(rs.getInt("AddType"));
		resourceLog.setAddTime(rs.getTimestamp("AddTime"));
		return resourceLog;
	}

	@Override
	public List<ResourceLog> getResourceLogByUserID(int userID)
	{
		String sql = "select * from t_l_resource where `userID` = ?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(userID);
		List<ResourceLog> resourceLog = queryList(sql,params);
		return resourceLog;
	}

}