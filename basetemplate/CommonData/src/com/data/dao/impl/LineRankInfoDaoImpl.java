package com.data.dao.impl;

import com.base.database.DataReader;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;

import com.base.database.BaseDao;
import com.base.database.DBParamWrapper;
import com.base.database.DataExecutor;
import com.base.database.pool.DBHelper;


import com.data.dao.ILineRankInfoDao;
import com.data.info.LineRankInfo;



/**
 * This file is generated by system automatically.Don't Modify It.
 *
 * @author System
 */
public class LineRankInfoDaoImpl extends BaseDao<LineRankInfo> implements ILineRankInfoDao
{
	public LineRankInfoDaoImpl(DBHelper helper)
	{
		super(helper);
	}


	@Override
	public boolean add(LineRankInfo lineRankInfo)
	{
		boolean result = false;
		String sql = "insert into t_u_line_rank(`UserID`, `Level`, `LeftCount`, `LastAdTime`) values(?, ?, ?, ?);";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,lineRankInfo.getUserID());
		params.put(Types.BIGINT,lineRankInfo.getLevel());
		params.put(Types.INTEGER,lineRankInfo.getLeftCount());
		params.put(Types.TIMESTAMP,lineRankInfo.getLastAdTime());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean update(LineRankInfo lineRankInfo)
	{
		boolean result = false;
		String sql = "update t_u_line_rank set `LeftCount`=?, `LastAdTime`=? where `UserID`=? and `Level`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,lineRankInfo.getLeftCount());
		params.put(Types.TIMESTAMP,lineRankInfo.getLastAdTime());
		params.put(Types.INTEGER,lineRankInfo.getUserID());
		params.put(Types.BIGINT,lineRankInfo.getLevel());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean delete(LineRankInfo lineRankInfo)
	{
		boolean result = false;
		String sql = "delete from t_u_line_rank where `UserID`=? and `Level`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,lineRankInfo.getUserID());
		params.put(Types.BIGINT,lineRankInfo.getLevel());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean addOrUpdate(LineRankInfo lineRankInfo)
	{
		boolean result = false;
		String sql = "insert into t_u_line_rank(`UserID`, `Level`, `LeftCount`, `LastAdTime`) values(?, ?, ?, ?) on DUPLICATE KEY update `LeftCount`=?,`LastAdTime`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,lineRankInfo.getUserID());
		params.put(Types.BIGINT,lineRankInfo.getLevel());
		params.put(Types.INTEGER,lineRankInfo.getLeftCount());
		params.put(Types.TIMESTAMP,lineRankInfo.getLastAdTime());
		params.put(Types.INTEGER,lineRankInfo.getLeftCount());
		params.put(Types.TIMESTAMP,lineRankInfo.getLastAdTime());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean deleteByKey(Object... ids)
	{
		boolean result = false;
		String sql = "delete from t_u_line_rank where `UserID`=? and `Level`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,ids[0]);
		params.put(Types.BIGINT,ids[1]);
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public LineRankInfo getByKey(Object... ids)
	{
		String sql = "select * from t_u_line_rank where `UserID`=? and `Level`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,ids[0]);
		params.put(Types.BIGINT,ids[1]);
		LineRankInfo lineRankInfo = query(sql, params);		return lineRankInfo;
	}


	@Override
	public List<LineRankInfo> listAll()
	{
		String sql = "select * from t_u_line_rank;";
		List<LineRankInfo> lineRankInfos = queryList(sql);		return lineRankInfos;
	}

	@Override
	public int[] addOrUpdateBatch(List<LineRankInfo> lineRankInfos)
	{
		if (lineRankInfos == null || lineRankInfos.isEmpty())
			return new int[1];
		String sql = "insert into t_u_line_rank(`UserID`, `Level`, `LeftCount`, `LastAdTime`) values(?, ?, ?, ?) on DUPLICATE KEY update `LeftCount`=?,`LastAdTime`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, lineRankInfos, new DataExecutor<int[]>()
			{
				@Override
				public int[] execute(PreparedStatement statement, Object... objects) throws Exception
				{
					@SuppressWarnings("unchecked")
					List<LineRankInfo>lineRankInfos = (List<LineRankInfo>)objects[0];
					for (LineRankInfo lineRankInfo : lineRankInfos)
					{
						DBParamWrapper params = new DBParamWrapper();
						params.put(Types.INTEGER,lineRankInfo.getUserID());
						params.put(Types.BIGINT,lineRankInfo.getLevel());
						params.put(Types.INTEGER,lineRankInfo.getLeftCount());
						params.put(Types.TIMESTAMP,lineRankInfo.getLastAdTime());
						params.put(Types.INTEGER,lineRankInfo.getLeftCount());
						params.put(Types.TIMESTAMP,lineRankInfo.getLastAdTime());
						statement = getDBHelper().prepareCommand(statement,params.getParams());
						statement.addBatch();
					}
					return statement.executeBatch();
				}
			});
		return effectedRows;
	}

	@Override
	public int[] deleteBatch(List<LineRankInfo> lineRankInfos)
	{
		String sql = "delete from t_u_line_rank where `UserID`=? and `Level`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, lineRankInfos, new DataExecutor<int[]>()
		{
			@Override
		public int[] execute(PreparedStatement statement, Object... objects) throws Exception
		{
			
			@SuppressWarnings("unchecked")
			List<LineRankInfo>lineRankInfos = (List<LineRankInfo>)objects[0];
			for (LineRankInfo lineRankInfo : lineRankInfos)
			{
					DBParamWrapper params = new DBParamWrapper();
					params.put(Types.INTEGER,lineRankInfo.getUserID());
					params.put(Types.BIGINT,lineRankInfo.getLevel());
					statement = getDBHelper().prepareCommand(statement,params.getParams());
					statement.addBatch();
				}
				return statement.executeBatch();
			}
		});
		return effectedRows;
	}
	@Override
	public LineRankInfo rsToEntity(ResultSet rs) throws SQLException
	{
		LineRankInfo lineRankInfo = new LineRankInfo();
		lineRankInfo.setUserID(rs.getInt("UserID"));
		lineRankInfo.setLevel(rs.getLong("Level"));
		lineRankInfo.setLeftCount(rs.getInt("LeftCount"));
		lineRankInfo.setLastAdTime(rs.getTimestamp("LastAdTime"));
		return lineRankInfo;
	}

	@Override
	public LineRankInfo getLineRankInfoByUserID(int userID)
	{
		String sql = "select * from t_u_line_rank where `userID` = ?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(userID);
		LineRankInfo lineRankInfo = query(sql,params);
		return lineRankInfo;
	}

}