package com.data.dao.impl;

import com.base.database.DataReader;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;

import com.base.database.BaseDao;
import com.base.database.DBParamWrapper;
import com.base.database.DataExecutor;
import com.base.database.pool.DBHelper;


import com.data.dao.IRankInfoDao;
import com.data.info.RankInfo;



/**
 * This file is generated by system automatically.Don't Modify It.
 *
 * @author System
 */
public class RankInfoDaoImpl extends BaseDao<RankInfo> implements IRankInfoDao
{
	public RankInfoDaoImpl(DBHelper helper)
	{
		super(helper);
	}


	@Override
	public boolean add(RankInfo rankInfo)
	{
		boolean result = false;
		String sql = "insert into t_u_rank(`RankType`, `TimeType`, `UserID`, `RankValue`, `UpdateTime`, `Header`, `NickName`, `Order`) values(?, ?, ?, ?, ?, ?, ?, ?);";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,rankInfo.getRankType());
		params.put(Types.INTEGER,rankInfo.getTimeType());
		params.put(Types.INTEGER,rankInfo.getUserID());
		params.put(Types.INTEGER,rankInfo.getRankValue());
		params.put(Types.TIMESTAMP,rankInfo.getUpdateTime());
		params.put(Types.INTEGER,rankInfo.getHeader());
		params.put(Types.VARCHAR,rankInfo.getNickName());
		params.put(Types.INTEGER,rankInfo.getOrder());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean update(RankInfo rankInfo)
	{
		boolean result = false;
		String sql = "update t_u_rank set `RankValue`=?, `UpdateTime`=?, `Header`=?, `NickName`=?, `Order`=? where `RankType`=? and `TimeType`=? and `UserID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,rankInfo.getRankValue());
		params.put(Types.TIMESTAMP,rankInfo.getUpdateTime());
		params.put(Types.INTEGER,rankInfo.getHeader());
		params.put(Types.VARCHAR,rankInfo.getNickName());
		params.put(Types.INTEGER,rankInfo.getOrder());
		params.put(Types.INTEGER,rankInfo.getRankType());
		params.put(Types.INTEGER,rankInfo.getTimeType());
		params.put(Types.INTEGER,rankInfo.getUserID());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean delete(RankInfo rankInfo)
	{
		boolean result = false;
		String sql = "delete from t_u_rank where `RankType`=? and `TimeType`=? and `UserID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,rankInfo.getRankType());
		params.put(Types.INTEGER,rankInfo.getTimeType());
		params.put(Types.INTEGER,rankInfo.getUserID());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean addOrUpdate(RankInfo rankInfo)
	{
		boolean result = false;
		String sql = "insert into t_u_rank(`RankType`, `TimeType`, `UserID`, `RankValue`, `UpdateTime`, `Header`, `NickName`, `Order`) values(?, ?, ?, ?, ?, ?, ?, ?) on DUPLICATE KEY update `RankValue`=?,`UpdateTime`=?,`Header`=?,`NickName`=?,`Order`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,rankInfo.getRankType());
		params.put(Types.INTEGER,rankInfo.getTimeType());
		params.put(Types.INTEGER,rankInfo.getUserID());
		params.put(Types.INTEGER,rankInfo.getRankValue());
		params.put(Types.TIMESTAMP,rankInfo.getUpdateTime());
		params.put(Types.INTEGER,rankInfo.getHeader());
		params.put(Types.VARCHAR,rankInfo.getNickName());
		params.put(Types.INTEGER,rankInfo.getOrder());
		params.put(Types.INTEGER,rankInfo.getRankValue());
		params.put(Types.TIMESTAMP,rankInfo.getUpdateTime());
		params.put(Types.INTEGER,rankInfo.getHeader());
		params.put(Types.VARCHAR,rankInfo.getNickName());
		params.put(Types.INTEGER,rankInfo.getOrder());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean deleteByKey(Object... ids)
	{
		boolean result = false;
		String sql = "delete from t_u_rank where `RankType`=? and `TimeType`=? and `UserID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,ids[0]);
		params.put(Types.INTEGER,ids[1]);
		params.put(Types.INTEGER,ids[2]);
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public RankInfo getByKey(Object... ids)
	{
		String sql = "select * from t_u_rank where `RankType`=? and `TimeType`=? and `UserID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,ids[0]);
		params.put(Types.INTEGER,ids[1]);
		params.put(Types.INTEGER,ids[2]);
		RankInfo rankInfo = query(sql, params);		return rankInfo;
	}


	@Override
	public List<RankInfo> listAll()
	{
		String sql = "select * from t_u_rank;";
		List<RankInfo> rankInfos = queryList(sql);		return rankInfos;
	}

	@Override
	public int[] addOrUpdateBatch(List<RankInfo> rankInfos)
	{
		if (rankInfos == null || rankInfos.isEmpty())
			return new int[1];
		String sql = "insert into t_u_rank(`RankType`, `TimeType`, `UserID`, `RankValue`, `UpdateTime`, `Header`, `NickName`, `Order`) values(?, ?, ?, ?, ?, ?, ?, ?) on DUPLICATE KEY update `RankValue`=?,`UpdateTime`=?,`Header`=?,`NickName`=?,`Order`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, rankInfos, new DataExecutor<int[]>()
			{
				@Override
				public int[] execute(PreparedStatement statement, Object... objects) throws Exception
				{
					@SuppressWarnings("unchecked")
					List<RankInfo>rankInfos = (List<RankInfo>)objects[0];
					for (RankInfo rankInfo : rankInfos)
					{
						DBParamWrapper params = new DBParamWrapper();
						params.put(Types.INTEGER,rankInfo.getRankType());
						params.put(Types.INTEGER,rankInfo.getTimeType());
						params.put(Types.INTEGER,rankInfo.getUserID());
						params.put(Types.INTEGER,rankInfo.getRankValue());
						params.put(Types.TIMESTAMP,rankInfo.getUpdateTime());
						params.put(Types.INTEGER,rankInfo.getHeader());
						params.put(Types.VARCHAR,rankInfo.getNickName());
						params.put(Types.INTEGER,rankInfo.getOrder());
						params.put(Types.INTEGER,rankInfo.getRankValue());
						params.put(Types.TIMESTAMP,rankInfo.getUpdateTime());
						params.put(Types.INTEGER,rankInfo.getHeader());
						params.put(Types.VARCHAR,rankInfo.getNickName());
						params.put(Types.INTEGER,rankInfo.getOrder());
						statement = getDBHelper().prepareCommand(statement,params.getParams());
						statement.addBatch();
					}
					return statement.executeBatch();
				}
			});
		return effectedRows;
	}

	@Override
	public int[] deleteBatch(List<RankInfo> rankInfos)
	{
		String sql = "delete from t_u_rank where `RankType`=? and `TimeType`=? and `UserID`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, rankInfos, new DataExecutor<int[]>()
		{
			@Override
		public int[] execute(PreparedStatement statement, Object... objects) throws Exception
		{
			
			@SuppressWarnings("unchecked")
			List<RankInfo>rankInfos = (List<RankInfo>)objects[0];
			for (RankInfo rankInfo : rankInfos)
			{
					DBParamWrapper params = new DBParamWrapper();
					params.put(Types.INTEGER,rankInfo.getRankType());
					params.put(Types.INTEGER,rankInfo.getTimeType());
					params.put(Types.INTEGER,rankInfo.getUserID());
					statement = getDBHelper().prepareCommand(statement,params.getParams());
					statement.addBatch();
				}
				return statement.executeBatch();
			}
		});
		return effectedRows;
	}
	@Override
	public RankInfo rsToEntity(ResultSet rs) throws SQLException
	{
		RankInfo rankInfo = new RankInfo();
		rankInfo.setRankType(rs.getInt("RankType"));
		rankInfo.setTimeType(rs.getInt("TimeType"));
		rankInfo.setUserID(rs.getInt("UserID"));
		rankInfo.setRankValue(rs.getInt("RankValue"));
		rankInfo.setUpdateTime(rs.getTimestamp("UpdateTime"));
		rankInfo.setHeader(rs.getInt("Header"));
		rankInfo.setNickName(rs.getString("NickName"));
		rankInfo.setOrder(rs.getInt("Order"));
		return rankInfo;
	}

	@Override
	public List<RankInfo> getRankInfoByUserID(int userID)
	{
		String sql = "select * from t_u_rank where `userID` = ?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(userID);
		List<RankInfo> rankInfo = queryList(sql,params);
		return rankInfo;
	}

}