package com.data.dao.impl;

import com.base.database.DataReader;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;

import com.base.database.BaseDao;
import com.base.database.DBParamWrapper;
import com.base.database.DataExecutor;
import com.base.database.pool.DBHelper;


import com.data.dao.IChargeInfoDao;
import com.data.info.ChargeInfo;



/**
 * This file is generated by system automatically.Don't Modify It.
 *
 * @author System
 */
public class ChargeInfoDaoImpl extends BaseDao<ChargeInfo> implements IChargeInfoDao
{
	public ChargeInfoDaoImpl(DBHelper helper)
	{
		super(helper);
	}


	@Override
	public boolean add(ChargeInfo chargeInfo)
	{
		boolean result = false;
		String sql = "insert into t_u_charge(`UserID`, `OrderId`, `AccountName`, `PayWay`, `PayMoney`, `PayTime`, `ConfigID`, `CreateTime`, `OrderStatus`, `PurchaseToken`) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?);";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.BIGINT,chargeInfo.getUserID());
		params.put(Types.VARCHAR,chargeInfo.getOrderId());
		params.put(Types.VARCHAR,chargeInfo.getAccountName());
		params.put(Types.VARCHAR,chargeInfo.getPayWay());
		params.put(Types.DECIMAL,chargeInfo.getPayMoney());
		params.put(Types.TIMESTAMP,chargeInfo.getPayTime());
		params.put(Types.INTEGER,chargeInfo.getConfigID());
		params.put(Types.TIMESTAMP,chargeInfo.getCreateTime());
		params.put(Types.INTEGER,chargeInfo.getOrderStatus());
		params.put(Types.VARCHAR,chargeInfo.getPurchaseToken());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean update(ChargeInfo chargeInfo)
	{
		boolean result = false;
		String sql = "update t_u_charge set `AccountName`=?, `PayWay`=?, `PayMoney`=?, `PayTime`=?, `ConfigID`=?, `CreateTime`=?, `OrderStatus`=?, `PurchaseToken`=? where `UserID`=? and `OrderId`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.VARCHAR,chargeInfo.getAccountName());
		params.put(Types.VARCHAR,chargeInfo.getPayWay());
		params.put(Types.DECIMAL,chargeInfo.getPayMoney());
		params.put(Types.TIMESTAMP,chargeInfo.getPayTime());
		params.put(Types.INTEGER,chargeInfo.getConfigID());
		params.put(Types.TIMESTAMP,chargeInfo.getCreateTime());
		params.put(Types.INTEGER,chargeInfo.getOrderStatus());
		params.put(Types.VARCHAR,chargeInfo.getPurchaseToken());
		params.put(Types.BIGINT,chargeInfo.getUserID());
		params.put(Types.VARCHAR,chargeInfo.getOrderId());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean delete(ChargeInfo chargeInfo)
	{
		boolean result = false;
		String sql = "delete from t_u_charge where `UserID`=? and `OrderId`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.BIGINT,chargeInfo.getUserID());
		params.put(Types.VARCHAR,chargeInfo.getOrderId());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean addOrUpdate(ChargeInfo chargeInfo)
	{
		boolean result = false;
		String sql = "insert into t_u_charge(`UserID`, `OrderId`, `AccountName`, `PayWay`, `PayMoney`, `PayTime`, `ConfigID`, `CreateTime`, `OrderStatus`, `PurchaseToken`) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?) on DUPLICATE KEY update `AccountName`=?,`PayWay`=?,`PayMoney`=?,`PayTime`=?,`ConfigID`=?,`CreateTime`=?,`OrderStatus`=?,`PurchaseToken`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.BIGINT,chargeInfo.getUserID());
		params.put(Types.VARCHAR,chargeInfo.getOrderId());
		params.put(Types.VARCHAR,chargeInfo.getAccountName());
		params.put(Types.VARCHAR,chargeInfo.getPayWay());
		params.put(Types.DECIMAL,chargeInfo.getPayMoney());
		params.put(Types.TIMESTAMP,chargeInfo.getPayTime());
		params.put(Types.INTEGER,chargeInfo.getConfigID());
		params.put(Types.TIMESTAMP,chargeInfo.getCreateTime());
		params.put(Types.INTEGER,chargeInfo.getOrderStatus());
		params.put(Types.VARCHAR,chargeInfo.getPurchaseToken());
		params.put(Types.VARCHAR,chargeInfo.getAccountName());
		params.put(Types.VARCHAR,chargeInfo.getPayWay());
		params.put(Types.DECIMAL,chargeInfo.getPayMoney());
		params.put(Types.TIMESTAMP,chargeInfo.getPayTime());
		params.put(Types.INTEGER,chargeInfo.getConfigID());
		params.put(Types.TIMESTAMP,chargeInfo.getCreateTime());
		params.put(Types.INTEGER,chargeInfo.getOrderStatus());
		params.put(Types.VARCHAR,chargeInfo.getPurchaseToken());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean deleteByKey(Object... ids)
	{
		boolean result = false;
		String sql = "delete from t_u_charge where `UserID`=? and `OrderId`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.BIGINT,ids[0]);
		params.put(Types.VARCHAR,ids[1]);
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public ChargeInfo getByKey(Object... ids)
	{
		String sql = "select * from t_u_charge where `UserID`=? and `OrderId`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.BIGINT,ids[0]);
		params.put(Types.VARCHAR,ids[1]);
		ChargeInfo chargeInfo = query(sql, params);		return chargeInfo;
	}


	@Override
	public List<ChargeInfo> listAll()
	{
		String sql = "select * from t_u_charge;";
		List<ChargeInfo> chargeInfos = queryList(sql);		return chargeInfos;
	}

	@Override
	public int[] addOrUpdateBatch(List<ChargeInfo> chargeInfos)
	{
		if (chargeInfos == null || chargeInfos.isEmpty())
			return new int[1];
		String sql = "insert into t_u_charge(`UserID`, `OrderId`, `AccountName`, `PayWay`, `PayMoney`, `PayTime`, `ConfigID`, `CreateTime`, `OrderStatus`, `PurchaseToken`) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?) on DUPLICATE KEY update `AccountName`=?,`PayWay`=?,`PayMoney`=?,`PayTime`=?,`ConfigID`=?,`CreateTime`=?,`OrderStatus`=?,`PurchaseToken`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, chargeInfos, new DataExecutor<int[]>()
			{
				@Override
				public int[] execute(PreparedStatement statement, Object... objects) throws Exception
				{
					@SuppressWarnings("unchecked")
					List<ChargeInfo>chargeInfos = (List<ChargeInfo>)objects[0];
					for (ChargeInfo chargeInfo : chargeInfos)
					{
						DBParamWrapper params = new DBParamWrapper();
						params.put(Types.BIGINT,chargeInfo.getUserID());
						params.put(Types.VARCHAR,chargeInfo.getOrderId());
						params.put(Types.VARCHAR,chargeInfo.getAccountName());
						params.put(Types.VARCHAR,chargeInfo.getPayWay());
						params.put(Types.DECIMAL,chargeInfo.getPayMoney());
						params.put(Types.TIMESTAMP,chargeInfo.getPayTime());
						params.put(Types.INTEGER,chargeInfo.getConfigID());
						params.put(Types.TIMESTAMP,chargeInfo.getCreateTime());
						params.put(Types.INTEGER,chargeInfo.getOrderStatus());
						params.put(Types.VARCHAR,chargeInfo.getPurchaseToken());
						params.put(Types.VARCHAR,chargeInfo.getAccountName());
						params.put(Types.VARCHAR,chargeInfo.getPayWay());
						params.put(Types.DECIMAL,chargeInfo.getPayMoney());
						params.put(Types.TIMESTAMP,chargeInfo.getPayTime());
						params.put(Types.INTEGER,chargeInfo.getConfigID());
						params.put(Types.TIMESTAMP,chargeInfo.getCreateTime());
						params.put(Types.INTEGER,chargeInfo.getOrderStatus());
						params.put(Types.VARCHAR,chargeInfo.getPurchaseToken());
						statement = getDBHelper().prepareCommand(statement,params.getParams());
						statement.addBatch();
					}
					return statement.executeBatch();
				}
			});
		return effectedRows;
	}

	@Override
	public int[] deleteBatch(List<ChargeInfo> chargeInfos)
	{
		String sql = "delete from t_u_charge where `UserID`=? and `OrderId`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, chargeInfos, new DataExecutor<int[]>()
		{
			@Override
		public int[] execute(PreparedStatement statement, Object... objects) throws Exception
		{
			
			@SuppressWarnings("unchecked")
			List<ChargeInfo>chargeInfos = (List<ChargeInfo>)objects[0];
			for (ChargeInfo chargeInfo : chargeInfos)
			{
					DBParamWrapper params = new DBParamWrapper();
					params.put(Types.BIGINT,chargeInfo.getUserID());
					params.put(Types.VARCHAR,chargeInfo.getOrderId());
					statement = getDBHelper().prepareCommand(statement,params.getParams());
					statement.addBatch();
				}
				return statement.executeBatch();
			}
		});
		return effectedRows;
	}
	@Override
	public ChargeInfo rsToEntity(ResultSet rs) throws SQLException
	{
		ChargeInfo chargeInfo = new ChargeInfo();
		chargeInfo.setUserID(rs.getLong("UserID"));
		chargeInfo.setOrderId(rs.getString("OrderId"));
		chargeInfo.setAccountName(rs.getString("AccountName"));
		chargeInfo.setPayWay(rs.getString("PayWay"));
		chargeInfo.setPayMoney(rs.getFloat("PayMoney"));
		chargeInfo.setPayTime(rs.getTimestamp("PayTime"));
		chargeInfo.setConfigID(rs.getInt("ConfigID"));
		chargeInfo.setCreateTime(rs.getTimestamp("CreateTime"));
		chargeInfo.setOrderStatus(rs.getInt("OrderStatus"));
		chargeInfo.setPurchaseToken(rs.getString("PurchaseToken"));
		return chargeInfo;
	}

	@Override
	public List<ChargeInfo> getChargeInfoByUserID(long userID)
	{
		String sql = "select * from t_u_charge where `userID` = ?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(userID);
		List<ChargeInfo> chargeInfo = queryList(sql,params);
		return chargeInfo;
	}

}