package com.data.account.dao.impl;

import com.base.database.DataReader;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;

import com.base.database.BaseDao;
import com.base.database.DBParamWrapper;
import com.base.database.DataExecutor;
import com.base.database.pool.DBHelper;


import com.data.account.dao.IDataInfoDao;
import com.data.account.info.DataInfo;



/**
 * This file is generated by system automatically.Don't Modify It.
 *
 * @author System
 */
public class DataInfoDaoImpl extends BaseDao<DataInfo> implements IDataInfoDao
{
	public DataInfoDaoImpl(DBHelper helper)
	{
		super(helper);
	}


	@Override
	public boolean add(DataInfo dataInfo)
	{
		boolean result = false;
		String sql = "insert into t_u_data(`KeyID`, `UserID`, `GroupID`, `Content`) values(?, ?, ?, ?);";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.BIGINT,dataInfo.getKeyID());
		params.put(Types.BIGINT,dataInfo.getUserID());
		params.put(Types.VARCHAR,dataInfo.getGroupID());
		params.put(Types.VARCHAR,dataInfo.getContent());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean update(DataInfo dataInfo)
	{
		boolean result = false;
		String sql = "update t_u_data set `UserID`=?, `GroupID`=?, `Content`=? where `KeyID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.BIGINT,dataInfo.getUserID());
		params.put(Types.VARCHAR,dataInfo.getGroupID());
		params.put(Types.VARCHAR,dataInfo.getContent());
		params.put(Types.BIGINT,dataInfo.getKeyID());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean delete(DataInfo dataInfo)
	{
		boolean result = false;
		String sql = "delete from t_u_data where `KeyID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.BIGINT,dataInfo.getKeyID());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean addOrUpdate(DataInfo dataInfo)
	{
		boolean result = false;
		String sql = "insert into t_u_data(`KeyID`, `UserID`, `GroupID`, `Content`) values(?, ?, ?, ?) on DUPLICATE KEY update `UserID`=?,`GroupID`=?,`Content`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.BIGINT,dataInfo.getKeyID());
		params.put(Types.BIGINT,dataInfo.getUserID());
		params.put(Types.VARCHAR,dataInfo.getGroupID());
		params.put(Types.VARCHAR,dataInfo.getContent());
		params.put(Types.BIGINT,dataInfo.getUserID());
		params.put(Types.VARCHAR,dataInfo.getGroupID());
		params.put(Types.VARCHAR,dataInfo.getContent());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean deleteByKey(Object... ids)
	{
		boolean result = false;
		String sql = "delete from t_u_data where `KeyID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.BIGINT,ids[0]);
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public DataInfo getByKey(Object... ids)
	{
		String sql = "select * from t_u_data where `KeyID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.BIGINT,ids[0]);
		DataInfo dataInfo = query(sql, params);		return dataInfo;
	}


	@Override
	public List<DataInfo> listAll()
	{
		String sql = "select * from t_u_data;";
		List<DataInfo> dataInfos = queryList(sql);		return dataInfos;
	}

	@Override
	public int[] addOrUpdateBatch(List<DataInfo> dataInfos)
	{
		if (dataInfos == null || dataInfos.isEmpty())
			return new int[1];
		String sql = "insert into t_u_data(`KeyID`, `UserID`, `GroupID`, `Content`) values(?, ?, ?, ?) on DUPLICATE KEY update `UserID`=?,`GroupID`=?,`Content`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, dataInfos, new DataExecutor<int[]>()
			{
				@Override
				public int[] execute(PreparedStatement statement, Object... objects) throws Exception
				{
					@SuppressWarnings("unchecked")
					List<DataInfo>dataInfos = (List<DataInfo>)objects[0];
					for (DataInfo dataInfo : dataInfos)
					{
						DBParamWrapper params = new DBParamWrapper();
						params.put(Types.BIGINT,dataInfo.getKeyID());
						params.put(Types.BIGINT,dataInfo.getUserID());
						params.put(Types.VARCHAR,dataInfo.getGroupID());
						params.put(Types.VARCHAR,dataInfo.getContent());
						params.put(Types.BIGINT,dataInfo.getUserID());
						params.put(Types.VARCHAR,dataInfo.getGroupID());
						params.put(Types.VARCHAR,dataInfo.getContent());
						statement = getDBHelper().prepareCommand(statement,params.getParams());
						statement.addBatch();
					}
					return statement.executeBatch();
				}
			});
		return effectedRows;
	}

	@Override
	public int[] deleteBatch(List<DataInfo> dataInfos)
	{
		String sql = "delete from t_u_data where `KeyID`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, dataInfos, new DataExecutor<int[]>()
		{
			@Override
		public int[] execute(PreparedStatement statement, Object... objects) throws Exception
		{
			
			@SuppressWarnings("unchecked")
			List<DataInfo>dataInfos = (List<DataInfo>)objects[0];
			for (DataInfo dataInfo : dataInfos)
			{
					DBParamWrapper params = new DBParamWrapper();
					params.put(Types.BIGINT,dataInfo.getKeyID());
					statement = getDBHelper().prepareCommand(statement,params.getParams());
					statement.addBatch();
				}
				return statement.executeBatch();
			}
		});
		return effectedRows;
	}
	@Override
	public DataInfo rsToEntity(ResultSet rs) throws SQLException
	{
		DataInfo dataInfo = new DataInfo();
		dataInfo.setKeyID(rs.getLong("KeyID"));
		dataInfo.setUserID(rs.getLong("UserID"));
		dataInfo.setGroupID(rs.getString("GroupID"));
		dataInfo.setContent(rs.getString("Content"));
		return dataInfo;
	}

	@Override
	public List<DataInfo> getDataInfoByUserID(long userID)
	{
		String sql = "select * from t_u_data where `userID` = ?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(userID);
		List<DataInfo> dataInfo = queryList(sql,params);
		return dataInfo;
	}

}