package com.data.account.dao.impl;

import com.base.database.DataReader;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;

import com.base.database.BaseDao;
import com.base.database.DBParamWrapper;
import com.base.database.DataExecutor;
import com.base.database.pool.DBHelper;


import com.data.account.dao.ITableDataDao;
import com.data.account.data.TableData;



/**
 * This file is generated by system automatically.Don't Modify It.
 *
 * @author System
 */
public class TableDataDaoImpl extends BaseDao<TableData> implements ITableDataDao
{
	public TableDataDaoImpl(DBHelper helper)
	{
		super(helper);
	}


	@Override
	public boolean add(TableData tableData)
	{
		boolean result = false;
		String sql = "insert into t_p_table(`TableID`, `Value`, `TableDesc`) values(?, ?, ?);";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,tableData.getTableID());
		params.put(Types.BIGINT,tableData.getValue());
		params.put(Types.VARCHAR,tableData.getTableDesc());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean update(TableData tableData)
	{
		boolean result = false;
		String sql = "update t_p_table set `Value`=?, `TableDesc`=? where `TableID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.BIGINT,tableData.getValue());
		params.put(Types.VARCHAR,tableData.getTableDesc());
		params.put(Types.INTEGER,tableData.getTableID());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean delete(TableData tableData)
	{
		boolean result = false;
		String sql = "delete from t_p_table where `TableID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,tableData.getTableID());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean addOrUpdate(TableData tableData)
	{
		boolean result = false;
		String sql = "insert into t_p_table(`TableID`, `Value`, `TableDesc`) values(?, ?, ?) on DUPLICATE KEY update `Value`=?,`TableDesc`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,tableData.getTableID());
		params.put(Types.BIGINT,tableData.getValue());
		params.put(Types.VARCHAR,tableData.getTableDesc());
		params.put(Types.BIGINT,tableData.getValue());
		params.put(Types.VARCHAR,tableData.getTableDesc());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean deleteByKey(Object... ids)
	{
		boolean result = false;
		String sql = "delete from t_p_table where `TableID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,ids[0]);
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public TableData getByKey(Object... ids)
	{
		String sql = "select * from t_p_table where `TableID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,ids[0]);
		TableData tableData = query(sql, params);		return tableData;
	}


	@Override
	public List<TableData> listAll()
	{
		String sql = "select * from t_p_table;";
		List<TableData> tableDatas = queryList(sql);		return tableDatas;
	}

	@Override
	public int[] addOrUpdateBatch(List<TableData> tableDatas)
	{
		if (tableDatas == null || tableDatas.isEmpty())
			return new int[1];
		String sql = "insert into t_p_table(`TableID`, `Value`, `TableDesc`) values(?, ?, ?) on DUPLICATE KEY update `Value`=?,`TableDesc`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, tableDatas, new DataExecutor<int[]>()
			{
				@Override
				public int[] execute(PreparedStatement statement, Object... objects) throws Exception
				{
					@SuppressWarnings("unchecked")
					List<TableData>tableDatas = (List<TableData>)objects[0];
					for (TableData tableData : tableDatas)
					{
						DBParamWrapper params = new DBParamWrapper();
						params.put(Types.INTEGER,tableData.getTableID());
						params.put(Types.BIGINT,tableData.getValue());
						params.put(Types.VARCHAR,tableData.getTableDesc());
						params.put(Types.BIGINT,tableData.getValue());
						params.put(Types.VARCHAR,tableData.getTableDesc());
						statement = getDBHelper().prepareCommand(statement,params.getParams());
						statement.addBatch();
					}
					return statement.executeBatch();
				}
			});
		return effectedRows;
	}

	@Override
	public int[] deleteBatch(List<TableData> tableDatas)
	{
		String sql = "delete from t_p_table where `TableID`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, tableDatas, new DataExecutor<int[]>()
		{
			@Override
		public int[] execute(PreparedStatement statement, Object... objects) throws Exception
		{
			
			@SuppressWarnings("unchecked")
			List<TableData>tableDatas = (List<TableData>)objects[0];
			for (TableData tableData : tableDatas)
			{
					DBParamWrapper params = new DBParamWrapper();
					params.put(Types.INTEGER,tableData.getTableID());
					statement = getDBHelper().prepareCommand(statement,params.getParams());
					statement.addBatch();
				}
				return statement.executeBatch();
			}
		});
		return effectedRows;
	}
	@Override
	public TableData rsToEntity(ResultSet rs) throws SQLException
	{
		TableData tableData = new TableData();
		tableData.setTableID(rs.getInt("TableID"));
		tableData.setValue(rs.getLong("Value"));
		tableData.setTableDesc(rs.getString("TableDesc"));
		return tableData;
	}

}