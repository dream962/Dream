package com.data.account.dao.impl;

import com.base.database.DataReader;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;

import com.base.database.BaseDao;
import com.base.database.DBParamWrapper;
import com.base.database.DataExecutor;
import com.base.database.pool.DBHelper;


import com.data.account.dao.IVersionDataDao;
import com.data.account.data.VersionData;



/**
 * This file is generated by system automatically.Don't Modify It.
 *
 * @author System
 */
public class VersionDataDaoImpl extends BaseDao<VersionData> implements IVersionDataDao
{
	public VersionDataDaoImpl(DBHelper helper)
	{
		super(helper);
	}


	@Override
	public boolean add(VersionData versionData)
	{
		boolean result = false;
		String sql = "insert into t_p_version(`VersionID`, `VersionDesc`, `IsForce`) values(?, ?, ?);";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,versionData.getVersionID());
		params.put(Types.VARCHAR,versionData.getVersionDesc());
		params.put(Types.TINYINT,versionData.getIsForce());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean update(VersionData versionData)
	{
		boolean result = false;
		String sql = "update t_p_version set `VersionDesc`=?, `IsForce`=? where `VersionID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.VARCHAR,versionData.getVersionDesc());
		params.put(Types.TINYINT,versionData.getIsForce());
		params.put(Types.INTEGER,versionData.getVersionID());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean delete(VersionData versionData)
	{
		boolean result = false;
		String sql = "delete from t_p_version where `VersionID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,versionData.getVersionID());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean addOrUpdate(VersionData versionData)
	{
		boolean result = false;
		String sql = "insert into t_p_version(`VersionID`, `VersionDesc`, `IsForce`) values(?, ?, ?) on DUPLICATE KEY update `VersionDesc`=?,`IsForce`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,versionData.getVersionID());
		params.put(Types.VARCHAR,versionData.getVersionDesc());
		params.put(Types.TINYINT,versionData.getIsForce());
		params.put(Types.VARCHAR,versionData.getVersionDesc());
		params.put(Types.TINYINT,versionData.getIsForce());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean deleteByKey(Object... ids)
	{
		boolean result = false;
		String sql = "delete from t_p_version where `VersionID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,ids[0]);
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public VersionData getByKey(Object... ids)
	{
		String sql = "select * from t_p_version where `VersionID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,ids[0]);
		VersionData versionData = query(sql, params);		return versionData;
	}


	@Override
	public List<VersionData> listAll()
	{
		String sql = "select * from t_p_version;";
		List<VersionData> versionDatas = queryList(sql);		return versionDatas;
	}

	@Override
	public int[] addOrUpdateBatch(List<VersionData> versionDatas)
	{
		if (versionDatas == null || versionDatas.isEmpty())
			return new int[1];
		String sql = "insert into t_p_version(`VersionID`, `VersionDesc`, `IsForce`) values(?, ?, ?) on DUPLICATE KEY update `VersionDesc`=?,`IsForce`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, versionDatas, new DataExecutor<int[]>()
			{
				@Override
				public int[] execute(PreparedStatement statement, Object... objects) throws Exception
				{
					@SuppressWarnings("unchecked")
					List<VersionData>versionDatas = (List<VersionData>)objects[0];
					for (VersionData versionData : versionDatas)
					{
						DBParamWrapper params = new DBParamWrapper();
						params.put(Types.INTEGER,versionData.getVersionID());
						params.put(Types.VARCHAR,versionData.getVersionDesc());
						params.put(Types.TINYINT,versionData.getIsForce());
						params.put(Types.VARCHAR,versionData.getVersionDesc());
						params.put(Types.TINYINT,versionData.getIsForce());
						statement = getDBHelper().prepareCommand(statement,params.getParams());
						statement.addBatch();
					}
					return statement.executeBatch();
				}
			});
		return effectedRows;
	}

	@Override
	public int[] deleteBatch(List<VersionData> versionDatas)
	{
		String sql = "delete from t_p_version where `VersionID`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, versionDatas, new DataExecutor<int[]>()
		{
			@Override
		public int[] execute(PreparedStatement statement, Object... objects) throws Exception
		{
			
			@SuppressWarnings("unchecked")
			List<VersionData>versionDatas = (List<VersionData>)objects[0];
			for (VersionData versionData : versionDatas)
			{
					DBParamWrapper params = new DBParamWrapper();
					params.put(Types.INTEGER,versionData.getVersionID());
					statement = getDBHelper().prepareCommand(statement,params.getParams());
					statement.addBatch();
				}
				return statement.executeBatch();
			}
		});
		return effectedRows;
	}
	@Override
	public VersionData rsToEntity(ResultSet rs) throws SQLException
	{
		VersionData versionData = new VersionData();
		versionData.setVersionID(rs.getInt("VersionID"));
		versionData.setVersionDesc(rs.getString("VersionDesc"));
		versionData.setIsForce(rs.getBoolean("IsForce"));
		return versionData;
	}

}