package com.data.account.dao.impl;

import com.base.database.DataReader;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;

import com.base.database.BaseDao;
import com.base.database.DBParamWrapper;
import com.base.database.DataExecutor;
import com.base.database.pool.DBHelper;


import com.data.account.dao.IUserDataDao;
import com.data.account.data.UserData;



/**
 * This file is generated by system automatically.Don't Modify It.
 *
 * @author System
 */
public class UserDataDaoImpl extends BaseDao<UserData> implements IUserDataDao
{
	public UserDataDaoImpl(DBHelper helper)
	{
		super(helper);
	}


	@Override
	public boolean add(UserData userData)
	{
		boolean result = false;
		String sql = "insert into t_p_user(`UserID`, `OpenID`, `UserName`, `RegisterDate`, `LastLoginDate`, `MachineCode`) values(?, ?, ?, ?, ?, ?);";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.BIGINT,userData.getUserID());
		params.put(Types.VARCHAR,userData.getOpenID());
		params.put(Types.VARCHAR,userData.getUserName());
		params.put(Types.TIMESTAMP,userData.getRegisterDate());
		params.put(Types.TIMESTAMP,userData.getLastLoginDate());
		params.put(Types.VARCHAR,userData.getMachineCode());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean update(UserData userData)
	{
		boolean result = false;
		String sql = "update t_p_user set `OpenID`=?, `UserName`=?, `RegisterDate`=?, `LastLoginDate`=?, `MachineCode`=? where `UserID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.VARCHAR,userData.getOpenID());
		params.put(Types.VARCHAR,userData.getUserName());
		params.put(Types.TIMESTAMP,userData.getRegisterDate());
		params.put(Types.TIMESTAMP,userData.getLastLoginDate());
		params.put(Types.VARCHAR,userData.getMachineCode());
		params.put(Types.BIGINT,userData.getUserID());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean delete(UserData userData)
	{
		boolean result = false;
		String sql = "delete from t_p_user where `UserID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.BIGINT,userData.getUserID());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean addOrUpdate(UserData userData)
	{
		boolean result = false;
		String sql = "insert into t_p_user(`UserID`, `OpenID`, `UserName`, `RegisterDate`, `LastLoginDate`, `MachineCode`) values(?, ?, ?, ?, ?, ?) on DUPLICATE KEY update `OpenID`=?,`UserName`=?,`RegisterDate`=?,`LastLoginDate`=?,`MachineCode`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.BIGINT,userData.getUserID());
		params.put(Types.VARCHAR,userData.getOpenID());
		params.put(Types.VARCHAR,userData.getUserName());
		params.put(Types.TIMESTAMP,userData.getRegisterDate());
		params.put(Types.TIMESTAMP,userData.getLastLoginDate());
		params.put(Types.VARCHAR,userData.getMachineCode());
		params.put(Types.VARCHAR,userData.getOpenID());
		params.put(Types.VARCHAR,userData.getUserName());
		params.put(Types.TIMESTAMP,userData.getRegisterDate());
		params.put(Types.TIMESTAMP,userData.getLastLoginDate());
		params.put(Types.VARCHAR,userData.getMachineCode());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean deleteByKey(Object... ids)
	{
		boolean result = false;
		String sql = "delete from t_p_user where `UserID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.BIGINT,ids[0]);
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public UserData getByKey(Object... ids)
	{
		String sql = "select * from t_p_user where `UserID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.BIGINT,ids[0]);
		UserData userData = query(sql, params);		return userData;
	}


	@Override
	public List<UserData> listAll()
	{
		String sql = "select * from t_p_user;";
		List<UserData> userDatas = queryList(sql);		return userDatas;
	}

	@Override
	public int[] addOrUpdateBatch(List<UserData> userDatas)
	{
		if (userDatas == null || userDatas.isEmpty())
			return new int[1];
		String sql = "insert into t_p_user(`UserID`, `OpenID`, `UserName`, `RegisterDate`, `LastLoginDate`, `MachineCode`) values(?, ?, ?, ?, ?, ?) on DUPLICATE KEY update `OpenID`=?,`UserName`=?,`RegisterDate`=?,`LastLoginDate`=?,`MachineCode`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, userDatas, new DataExecutor<int[]>()
			{
				@Override
				public int[] execute(PreparedStatement statement, Object... objects) throws Exception
				{
					@SuppressWarnings("unchecked")
					List<UserData>userDatas = (List<UserData>)objects[0];
					for (UserData userData : userDatas)
					{
						DBParamWrapper params = new DBParamWrapper();
						params.put(Types.BIGINT,userData.getUserID());
						params.put(Types.VARCHAR,userData.getOpenID());
						params.put(Types.VARCHAR,userData.getUserName());
						params.put(Types.TIMESTAMP,userData.getRegisterDate());
						params.put(Types.TIMESTAMP,userData.getLastLoginDate());
						params.put(Types.VARCHAR,userData.getMachineCode());
						params.put(Types.VARCHAR,userData.getOpenID());
						params.put(Types.VARCHAR,userData.getUserName());
						params.put(Types.TIMESTAMP,userData.getRegisterDate());
						params.put(Types.TIMESTAMP,userData.getLastLoginDate());
						params.put(Types.VARCHAR,userData.getMachineCode());
						statement = getDBHelper().prepareCommand(statement,params.getParams());
						statement.addBatch();
					}
					return statement.executeBatch();
				}
			});
		return effectedRows;
	}

	@Override
	public int[] deleteBatch(List<UserData> userDatas)
	{
		String sql = "delete from t_p_user where `UserID`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, userDatas, new DataExecutor<int[]>()
		{
			@Override
		public int[] execute(PreparedStatement statement, Object... objects) throws Exception
		{
			
			@SuppressWarnings("unchecked")
			List<UserData>userDatas = (List<UserData>)objects[0];
			for (UserData userData : userDatas)
			{
					DBParamWrapper params = new DBParamWrapper();
					params.put(Types.BIGINT,userData.getUserID());
					statement = getDBHelper().prepareCommand(statement,params.getParams());
					statement.addBatch();
				}
				return statement.executeBatch();
			}
		});
		return effectedRows;
	}
	@Override
	public UserData rsToEntity(ResultSet rs) throws SQLException
	{
		UserData userData = new UserData();
		userData.setUserID(rs.getLong("UserID"));
		userData.setOpenID(rs.getString("OpenID"));
		userData.setUserName(rs.getString("UserName"));
		userData.setRegisterDate(rs.getTimestamp("RegisterDate"));
		userData.setLastLoginDate(rs.getTimestamp("LastLoginDate"));
		userData.setMachineCode(rs.getString("MachineCode"));
		return userData;
	}

	@Override
	public UserData getUserDataByUserID(long userID)
	{
		String sql = "select * from t_p_user where `userID` = ?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(userID);
		UserData userData = query(sql,params);
		return userData;
	}

}