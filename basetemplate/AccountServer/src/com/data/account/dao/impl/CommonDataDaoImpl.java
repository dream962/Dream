package com.data.account.dao.impl;

import com.base.database.DataReader;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;

import com.base.database.BaseDao;
import com.base.database.DBParamWrapper;
import com.base.database.DataExecutor;
import com.base.database.pool.DBHelper;


import com.data.account.dao.ICommonDataDao;
import com.data.account.data.CommonData;



/**
 * This file is generated by system automatically.Don't Modify It.
 *
 * @author System
 */
public class CommonDataDaoImpl extends BaseDao<CommonData> implements ICommonDataDao
{
	public CommonDataDaoImpl(DBHelper helper)
	{
		super(helper);
	}


	@Override
	public boolean add(CommonData commonData)
	{
		boolean result = false;
		String sql = "insert into t_p_common(`NoticeType`, `LanguageType`, `ID`, `Title`, `NoticeMessage`) values(?, ?, ?, ?, ?);";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,commonData.getNoticeType());
		params.put(Types.VARCHAR,commonData.getLanguageType());
		params.put(Types.INTEGER,commonData.getID());
		params.put(Types.VARCHAR,commonData.getTitle());
		params.put(Types.VARCHAR,commonData.getNoticeMessage());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean update(CommonData commonData)
	{
		boolean result = false;
		String sql = "update t_p_common set `Title`=?, `NoticeMessage`=? where `NoticeType`=? and `LanguageType`=? and `ID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.VARCHAR,commonData.getTitle());
		params.put(Types.VARCHAR,commonData.getNoticeMessage());
		params.put(Types.INTEGER,commonData.getNoticeType());
		params.put(Types.VARCHAR,commonData.getLanguageType());
		params.put(Types.INTEGER,commonData.getID());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean delete(CommonData commonData)
	{
		boolean result = false;
		String sql = "delete from t_p_common where `NoticeType`=? and `LanguageType`=? and `ID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,commonData.getNoticeType());
		params.put(Types.VARCHAR,commonData.getLanguageType());
		params.put(Types.INTEGER,commonData.getID());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean addOrUpdate(CommonData commonData)
	{
		boolean result = false;
		String sql = "insert into t_p_common(`NoticeType`, `LanguageType`, `ID`, `Title`, `NoticeMessage`) values(?, ?, ?, ?, ?) on DUPLICATE KEY update `Title`=?,`NoticeMessage`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,commonData.getNoticeType());
		params.put(Types.VARCHAR,commonData.getLanguageType());
		params.put(Types.INTEGER,commonData.getID());
		params.put(Types.VARCHAR,commonData.getTitle());
		params.put(Types.VARCHAR,commonData.getNoticeMessage());
		params.put(Types.VARCHAR,commonData.getTitle());
		params.put(Types.VARCHAR,commonData.getNoticeMessage());
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public boolean deleteByKey(Object... ids)
	{
		boolean result = false;
		String sql = "delete from t_p_common where `NoticeType`=? and `LanguageType`=? and `ID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,ids[0]);
		params.put(Types.VARCHAR,ids[1]);
		params.put(Types.INTEGER,ids[2]);
		result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
		return result;
	}

	@Override
	public CommonData getByKey(Object... ids)
	{
		String sql = "select * from t_p_common where `NoticeType`=? and `LanguageType`=? and `ID`=?;";
		DBParamWrapper params = new DBParamWrapper();
		params.put(Types.INTEGER,ids[0]);
		params.put(Types.VARCHAR,ids[1]);
		params.put(Types.INTEGER,ids[2]);
		CommonData commonData = query(sql, params);		return commonData;
	}


	@Override
	public List<CommonData> listAll()
	{
		String sql = "select * from t_p_common;";
		List<CommonData> commonDatas = queryList(sql);		return commonDatas;
	}

	@Override
	public int[] addOrUpdateBatch(List<CommonData> commonDatas)
	{
		if (commonDatas == null || commonDatas.isEmpty())
			return new int[1];
		String sql = "insert into t_p_common(`NoticeType`, `LanguageType`, `ID`, `Title`, `NoticeMessage`) values(?, ?, ?, ?, ?) on DUPLICATE KEY update `Title`=?,`NoticeMessage`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, commonDatas, new DataExecutor<int[]>()
			{
				@Override
				public int[] execute(PreparedStatement statement, Object... objects) throws Exception
				{
					@SuppressWarnings("unchecked")
					List<CommonData>commonDatas = (List<CommonData>)objects[0];
					for (CommonData commonData : commonDatas)
					{
						DBParamWrapper params = new DBParamWrapper();
						params.put(Types.INTEGER,commonData.getNoticeType());
						params.put(Types.VARCHAR,commonData.getLanguageType());
						params.put(Types.INTEGER,commonData.getID());
						params.put(Types.VARCHAR,commonData.getTitle());
						params.put(Types.VARCHAR,commonData.getNoticeMessage());
						params.put(Types.VARCHAR,commonData.getTitle());
						params.put(Types.VARCHAR,commonData.getNoticeMessage());
						statement = getDBHelper().prepareCommand(statement,params.getParams());
						statement.addBatch();
					}
					return statement.executeBatch();
				}
			});
		return effectedRows;
	}

	@Override
	public int[] deleteBatch(List<CommonData> commonDatas)
	{
		String sql = "delete from t_p_common where `NoticeType`=? and `LanguageType`=? and `ID`=?;";
		int[] effectedRows = getDBHelper().sqlBatch(sql, commonDatas, new DataExecutor<int[]>()
		{
			@Override
		public int[] execute(PreparedStatement statement, Object... objects) throws Exception
		{
			
			@SuppressWarnings("unchecked")
			List<CommonData>commonDatas = (List<CommonData>)objects[0];
			for (CommonData commonData : commonDatas)
			{
					DBParamWrapper params = new DBParamWrapper();
					params.put(Types.INTEGER,commonData.getNoticeType());
					params.put(Types.VARCHAR,commonData.getLanguageType());
					params.put(Types.INTEGER,commonData.getID());
					statement = getDBHelper().prepareCommand(statement,params.getParams());
					statement.addBatch();
				}
				return statement.executeBatch();
			}
		});
		return effectedRows;
	}
	@Override
	public CommonData rsToEntity(ResultSet rs) throws SQLException
	{
		CommonData commonData = new CommonData();
		commonData.setNoticeType(rs.getInt("NoticeType"));
		commonData.setLanguageType(rs.getString("LanguageType"));
		commonData.setID(rs.getInt("ID"));
		commonData.setTitle(rs.getString("Title"));
		commonData.setNoticeMessage(rs.getString("NoticeMessage"));
		return commonData;
	}

}