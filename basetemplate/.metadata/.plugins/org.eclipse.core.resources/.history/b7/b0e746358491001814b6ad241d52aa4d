package com.logic.map;

import java.util.ArrayList;
import java.util.List;

import com.proto.map.gen.WorldMapMsg.ConfigNodeProto;

/**
 * 地图节点
 * 
 * @author dream
 *
 */
public class MapNode
{
    private int nodeID;

    /** 节点列号 */
    private int nx;

    /** 节点行号 */
    private int ny;

    private int px;

    private int py;

    private boolean isCanMove;

    private List<MapNode> neighbors;

    public MapNode(ConfigNodeProto config)
    {
        nodeID = config.getNodeID();
        nx = config.getNodeX();
        ny = config.getNodeY();
        isCanMove = config.getIsCanMove();
        px = config.getPixelX();
        py = config.getPixelY();
        neighbors = new ArrayList<>();
    }

    public void wrapNeighbor(MapGraph map)
    {
        // 如果是偶数行
        if (ny / 2 == 0)
        {
            MapNode node = map.getNode(nx - 1, ny - 1);
            if (node != null)
                neighbors.add(node);

            node = map.getNode(nx - 1, ny);
            if (node != null)
                neighbors.add(node);

            node = map.getNode(nx - 1, ny + 1);
            if (node != null)
                neighbors.add(node);

            node = map.getNode(nx, ny + 1);
            if (node != null)
                neighbors.add(node);

            node = map.getNode(nx + 1, ny);
            if (node != null)
                neighbors.add(node);

            node = map.getNode(nx, ny - 1);
            if (node != null)
                neighbors.add(node);
        }
        else
        {
            MapNode node = map.getNode(nx, ny - 1);
            if (node != null)
                neighbors.add(node);

            node = map.getNode(nx - 1, ny);
            if (node != null)
                neighbors.add(node);

            node = map.getNode(nx, ny + 1);
            if (node != null)
                neighbors.add(node);

            node = map.getNode(nx + 1, ny + 1);
            if (node != null)
                neighbors.add(node);

            node = map.getNode(nx + 1, ny);
            if (node != null)
                neighbors.add(node);

            node = map.getNode(nx + 1, ny - 1);
            if (node != null)
                neighbors.add(node);
        }

    }

    public boolean getCanMove()
    {
        return isCanMove;
    }

    public int getPX()
    {
        return px;
    }

    public int getPY()
    {
        return py;
    }

    public int getNodeX()
    {
        return nx;
    }

    public int getNodeY()
    {
        return ny;
    }

    public int getNodeID()
    {
        return nodeID;
    }
}
