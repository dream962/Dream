package com.game.cache;

import java.util.List;

import com.base.redis.RedisCommon;
import com.base.redis.RedisSaveHandler;
import com.base.rmi.IRemoteCode;
import com.data.business.SceneBusiness;
import com.data.business.TableType;
import com.data.info.SceneExploreInfo;
import com.data.info.SceneFieldInfo;
import com.data.info.SceneFightInfo;
import com.data.info.SceneInfo;
import com.data.info.SceneOpenInfo;
import com.game.component.GameCacheComponent;

/**
 * 世界地图缓存处理
 * 
 * @author dream
 *
 */
@IRemoteCode(code = GameCacheType.Scene, desc = "世界地图数据")
public class RemoteScene extends RedisCommon
{
    private static final byte SCENE = 1;
    private static final byte SCENE_FIELD = 2;
    private static final byte SCENE_OPEN = 3;
    private static final byte SCENE_EXPLORE = 4;
    private static final byte SCENE_FIGHT = 5;

    private static final String KEY_SCENE = "slg:%s:scene";
    private static final String KEY_SCENE_FIELD = "slg:%s:scene_field";
    private static final String KEY_SCENE_OPEN = "slg:%s:scene_open";
    private static final String KEY_SCENE_EXPLORE = "slg:%s:scene_explore";
    private static final String KEY_SCENE_FIGHT = "slg:%s:scene_fight";

    public RemoteScene()
    {
        RedisSaveHandler<SceneInfo> sceneHandler = new RedisSaveHandler<SceneInfo>(
                (list) -> SceneBusiness.addOrUpdateSceneInfoList(list));
        RedisSaveHandler<SceneFieldInfo> fieldHandler = new RedisSaveHandler<SceneFieldInfo>(
                (list) -> SceneBusiness.addOrUpdateSceneFieldList(list));
        RedisSaveHandler<SceneOpenInfo> openHandler = new RedisSaveHandler<SceneOpenInfo>(
                (list) -> SceneBusiness.addOrUpdateSceneOpenInfoList(list));
        
        RedisSaveHandler<SceneExploreInfo> exploreHandler = new RedisSaveHandler<SceneExploreInfo>(
                (list) -> 
                {
                    if(SceneBusiness.addOrUpdateSceneExploreList(list))
                    {
                        for(SceneExploreInfo info:list)
                        {
                            if(info.getIsExist()==false)
                            {
                                String key=
                                getRedisClient(info.getUserID()).hdel(key, field);
                            }
                        }
                    }
                });
        
        RedisSaveHandler<SceneFightInfo> fightHandler = new RedisSaveHandler<SceneFightInfo>(
                (list) -> SceneBusiness.addOrUpdateSceneFightList(list));

        handlerMap.put(SCENE, sceneHandler);
        handlerMap.put(SCENE_FIELD, fieldHandler);
        handlerMap.put(SCENE_OPEN, openHandler);
        handlerMap.put(SCENE_EXPLORE, exploreHandler);
        handlerMap.put(SCENE_FIGHT, fightHandler);
    }

    /************************************************** Scene ****************************************************/

    public SceneInfo getSceneInfo(long userID)
    {
        String key = String.format(KEY_SCENE, userID);
        SceneInfo info = getRedisClient(userID).get(key, SceneInfo.class);
        if (info == null)
        {
            info = SceneBusiness.getSceneInfo(userID);
            if (null != info)
            {
                getRedisClient(userID).setex(key, info);
            }
        }
        return info;
    }

    public void updateSceneInfo(final SceneInfo info)
    {
        if (!info.isChanged())
            return;

        String key = String.format(KEY_SCENE, info.getUserID());
        getRedisClient(info.getUserID()).set(key, info);
        addKey(SCENE, info.getUserID(), key, SceneInfo.class);
        resetChanged(info);
    }

    /************************************************** Field ****************************************************/

    public List<SceneFieldInfo> getSceneFieldList(long userID)
    {
        String key = String.format(KEY_SCENE_FIELD, userID);
        List<SceneFieldInfo> list = getRedisClient(userID).hValues(key, SceneFieldInfo.class);
        if (list == null)
        {
            list = SceneBusiness.getSceneFieldInfoList(userID);
            if (null != list)
            {
                for (SceneFieldInfo field : list)
                {
                    getRedisClient(userID).hset(key, field.getFieldID(), field);
                    addSubKey(SCENE_FIELD, userID, key, field.getFieldID(), SceneFieldInfo.class);
                }
            }
        }

        resetChanged(list);
        return list;
    }

    public void updateSceneFieldInfo(final SceneFieldInfo info)
    {
        if (!info.isChanged())
            return;

        String key = String.format(KEY_SCENE_FIELD, info.getUserID());
        getRedisClient(info.getUserID()).hset(key, info.getFieldID(), info);
        addSubKey(SCENE_FIELD, info.getUserID(), key, info.getFieldID(), SceneFieldInfo.class);
        resetChanged(info);
    }

    /************************************************** Open ****************************************************/

    public SceneOpenInfo getSceneOpenInfo(long userID)
    {
        String key = String.format(KEY_SCENE_OPEN, userID);
        SceneOpenInfo info = getRedisClient(userID).get(key, SceneOpenInfo.class);
        if (info == null)
        {
            SceneOpenInfo openInfo = SceneBusiness.getSceneOpenInfo(userID);
            if (null != openInfo)
            {
                getRedisClient(userID).set(key, openInfo);
                addKey(SCENE_OPEN, userID, key, SceneOpenInfo.class);
            }
        }

        resetChanged(info);
        return info;
    }

    public void updateSceneOpenInfo(final SceneOpenInfo info)
    {
        if (!info.isChanged())
            return;

        String key = String.format(KEY_SCENE_OPEN, info.getUserID());
        getRedisClient(info.getUserID()).set(key, info);
        addKey(SCENE_OPEN, info.getUserID(), key, SceneOpenInfo.class);
        resetChanged(info);
    }

    /************************************************** explore ****************************************************/

    public void updateSceneExplore(SceneExploreInfo info)
    {
        if (info.getKeyID() <= 0)
        {
            int id = (int) GameCacheComponent.getRemoteSystem().getTableMaxID(TableType.T_U_SCENE_EXPLORE);
            info.setKeyID(id);
        }

        if (!info.isChanged())
            return;

        String key = String.format(KEY_SCENE_EXPLORE, info.getUserID());
        getRedisClient(info.getUserID()).hset(key, info.getKeyID(), info);
        addSubKey(SCENE_EXPLORE, info.getUserID(), key, info.getKeyID(), SceneExploreInfo.class);
        resetChanged(info);
    }
    
    public List<SceneExploreInfo> getExploreList(long userID)
    {
        String key = String.format(KEY_SCENE_EXPLORE, userID);
        List<SceneExploreInfo> list = getRedisClient(userID).hValues(key, SceneExploreInfo.class);
        if (list == null)
        {
            list = SceneBusiness.getSceneExploreList(userID);
            if (null != list)
            {
                for (SceneExploreInfo exp : list)
                {
                    getRedisClient(userID).hset(key, exp.getKeyID(), exp);
                    addSubKey(SCENE_EXPLORE, userID, key, exp.getKeyID(), SceneExploreInfo.class);
                }
            }
        }

        resetChanged(list);
        return list;
    }

}
