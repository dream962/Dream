package com.game.user.cmd.world;

import java.util.List;

import com.base.command.ICode;
import com.base.net.CommonMessage;
import com.game.object.player.GamePlayer;
import com.game.scene.WorldField;
import com.game.scene.WorldScene;
import com.game.user.cmd.AbstractUserCmd;
import com.google.protobuf.InvalidProtocolBufferException;
import com.proto.command.UserCmdType.UserCmdInType;
import com.proto.command.UserCmdType.UserCmdOutType;
import com.proto.login.gen.UserLoginMsg.UserPingProto;
import com.proto.world.gen.WorldInMsg.WorldEventClickProto;
import com.util.print.LogFactory;
import com.util.print.PrintFactory;

/**
 * 世界地图军队事件
 * @author dream
 *
 */
@ICode(code = UserCmdInType.WORLD_EVENT_EXPLORE_VALUE)
public class WorldEventExploreCmd extends AbstractUserCmd
{
    @Override
    public void execute(GamePlayer player, CommonMessage packet)
    {
        try
        {
            try
            {
                WorldEventClickProto proto = WorldEventClickProto.parseFrom(packet.getBody());
                int fieldID = proto.getFieldID();
                int eventKeyID = proto.getEventKeyID();

                WorldScene scene = player.getWorldScene();
                WorldField field = scene.getField(fieldID);
                if (field != null)
                {
                    if (field.getTrigger() == null)
                    {
                        LogFactory.error("world click event is null.fieldID:{}", fieldID);
                        return;
                    }

                    if (field.getTrigger().getIndex() != eventKeyID)
                    {
                        LogFactory.error("world click event is null.fieldID:{}", fieldID);
                        return;
                    }
                    
                    // 具体处理
                }
                else
                {
                    LogFactory.error("world field is null.fieldID:{}", fieldID);
                }
            }
            catch (InvalidProtocolBufferException e)
            {
                e.printStackTrace();
            }
        }
        catch (InvalidProtocolBufferException e)
        {
            e.printStackTrace();
        }
    }
}
