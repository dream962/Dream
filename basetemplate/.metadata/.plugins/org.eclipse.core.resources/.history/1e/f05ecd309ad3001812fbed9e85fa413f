package com.game.scene.building;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import com.base.code.ErrorCodeType;
import com.data.bag.ItemAddType;
import com.data.bag.ItemRemoveType;
import com.data.bean.BuildingBean;
import com.data.bean.BuildingCreateBean;
import com.data.bean.BuildingLevelBean;
import com.data.component.GamePropertiesComponent;
import com.data.info.BuildingIndustryInfo;
import com.data.info.BuildingInfo;
import com.data.type.ResourceType;
import com.game.WorldResWrapData.BuildingIndustryProductData;
import com.game.WorldResWrapData.BuildingResData;
import com.game.component.BuildingDataComponent;
import com.game.component.GameCacheComponent;
import com.game.component.PlayerResourceComponent;
import com.game.object.player.GamePlayer;
import com.game.scene.WorldMathUtil;
import com.game.scene.WorldSceneAllType;
import com.game.scene.city.AbstractCity;
import com.proto.building.gen.BuildingOutMsg.BuildingBagChangeProtoOut;
import com.proto.building.gen.BuildingOutMsg.BuildingBaseProtoOut;
import com.proto.building.gen.BuildingOutMsg.BuildingCallPeopleProtoOut;
import com.proto.building.gen.BuildingOutMsg.BuildingChangePosProtoOut;
import com.proto.building.gen.BuildingOutMsg.BuildingCreateProtoOut;
import com.proto.building.gen.BuildingOutMsg.BuildingDestroyProtoOut;
import com.proto.building.gen.BuildingOutMsg.BuildingIndustryProtoOut;
import com.proto.building.gen.BuildingOutMsg.BuildingUnionUpdateProtoOut;
import com.proto.command.UserCmdType.UserCmdOutType;

/**
 * 城池内的建筑格子背包
 * 
 * @author dream
 *
 */
public class BuildingBag
{
    /** 城池内创建的建筑列表《位置，数据》 */
    private Map<Integer, BaseBuilding> map = new ConcurrentHashMap<>();
    /** 工业建筑生产类型《生产类型，数据》 */
    private Map<Integer, BuildingIndustryInfo> industryMap = new ConcurrentHashMap<>();
    /** 城池实例 */
    private AbstractCity city;

    public BuildingBag(AbstractCity city)
    {
        this.city = city;
    }

    /**
     * 初始化
     * 
     * @return
     */
    public boolean init()
    {
        // 建筑格子信息
        List<BuildingInfo> infoList = GameCacheComponent.getRemoteBuilding().getBuildingList(city.getScenePlayer().getUserID());
        for (BuildingInfo info : infoList)
        {
            if (info.getCityIndexID() == city.getCityIndexID() && info.getPosition() > 0)
            {
                BuildingBean bean = BuildingDataComponent.getBuildingBean(info.getBuildingID());
                BuildingLevelBean levelBean = BuildingDataComponent.getBuildingLevelBean(info.getBuildingID(), info.getBuildingLevel());
                BaseBuilding building = new BaseBuilding(bean, levelBean, info);
                map.put(info.getPosition(), building);
            }
        }

        // 工业生产自动进行配置
        List<BuildingIndustryInfo> industryList = GameCacheComponent.getRemoteBuilding().getBuildingIndustryList(city.getScenePlayer().getUserID());
        for (BuildingIndustryInfo info : industryList)
        {
            if (info.getCityIndexID() == city.getCityIndexID())
            {
                industryMap.put(info.getIndustryType(), info);
            }
        }

        return true;
    }

    /**
     * 背包的空间
     * 
     * @return
     */
    public int getBagCount()
    {
        int count = city.getCityBean().getStructRowCount() * GamePropertiesComponent.BUILDING_ROW_COUNT;
        return count;
    }

    /**
     * 根据主键ID取得建筑
     * 
     * @param indexID
     * @return
     */
    public BaseBuilding getBuildingByID(int indexID)
    {
        for (BaseBuilding baseBuilding : map.values())
        {
            if (baseBuilding.getBuildingID() == indexID)
                return baseBuilding;
        }

        return null;
    }

    /**
     * 根据建筑子类型查询建筑
     * 
     * @param subType
     * @return
     */
    public List<BaseBuilding> getBuildingListBySubType(int subType)
    {
        List<BaseBuilding> list = new ArrayList<>();
        for (BaseBuilding baseBuilding : map.values())
        {
            if (baseBuilding.getSubType() == subType)
            {
                list.add(baseBuilding);
            }
        }

        return list;
    }

    /**
     * 根据主类型查询建筑
     * 
     * @param mainType
     * @return
     */
    public List<BaseBuilding> getBuildingListByMainType(int mainType)
    {
        List<BaseBuilding> list = new ArrayList<>();
        for (BaseBuilding baseBuilding : map.values())
        {
            if (baseBuilding.getMainType() == mainType)
            {
                list.add(baseBuilding);
            }
        }

        return list;
    }

    /**
     * 根据工业生产类型查询建筑
     * 
     * @param mainType
     * @return
     */
    public List<BaseBuilding> getBuildingListByIndustryType(int industryType)
    {
        List<BaseBuilding> list = new ArrayList<>();
        for (BaseBuilding baseBuilding : map.values())
        {
            if (baseBuilding.getMainType() == WorldSceneAllType.BUILDING_MAIN_INDUSTRY && baseBuilding.getBean().getOpenIndustryType() == industryType)
            {
                list.add(baseBuilding);
            }
        }

        return list;
    }

    /**
     * 取得主建筑的周围距离为1格子某类型的建筑
     * 
     * @param subType
     * @return
     */
    public List<BaseBuilding> getBuildingListByDistance(int centerPos, int subType)
    {
        List<BaseBuilding> list = new ArrayList<>();

        int row = GamePropertiesComponent.BUILDING_ROW_COUNT;
        int col = city.getCityBean().getStructRowCount();
        List<Integer> posList = WorldMathUtil.calLayer1(centerPos, col, row);

        for (int p : posList)
        {
            if (map.get(p) != null)
            {
                if (map.get(p).getSubType() == subType)
                {
                    list.add(map.get(p));
                }
            }
        }

        return list;
    }

    /**
     * 取得城市的最大人口数量
     * 
     * @return
     */
    public int getBuildingTotalPopulace()
    {
        // 总数=民居的和 *（1+警局加成）*（1+科技加成）
        int total = 0;

        List<BaseBuilding> list = getBuildingListBySubType(WorldSceneAllType.BUILDING_BASE_SUB3);
        int base = 0;
        for (BaseBuilding building : list)
        {
            base += building.getLevelBean().getEffectValue1();
        }

        List<BaseBuilding> list2 = getBuildingListBySubType(WorldSceneAllType.BUILDING_BASE_SUB4);
        float rate = 0.0f;
        for (BaseBuilding building : list2)
        {
            rate += building.getLevelBean().getEffectValue1();
        }

        total = (int) (base * (1 + rate));

        return total;
    }

    /**
     * 取得工业生产数据列表
     * 
     * @return
     */
    public List<BuildingIndustryProductData> getIndustryProductList()
    {
        List<BuildingIndustryProductData> list = new ArrayList<>();

        for (BuildingIndustryInfo info : industryMap.values())
        {
            if (info.getIsWorking())
            {
                List<BaseBuilding> buildings = getBuildingListByIndustryType(info.getIndustryType());
                if (!buildings.isEmpty())
                {
                    BuildingIndustryProductData data = new BuildingIndustryProductData();
                    data.industryType = info.getIndustryType();

                    for (BaseBuilding building : buildings)
                    {
                        if (building.getLevelBean().getResourceID() > 0)
                        {
                            data.resType = building.getLevelBean().getResourceID();
                            data.resCount += building.getLevelBean().getResourceCount();
                        }

                        if (building.getLevelBean().getProductID1() > 0)
                        {
                            data.productType1 = building.getLevelBean().getProductID1();
                            data.productCount1 += building.getLevelBean().getProductCount1();
                        }

                        if (building.getLevelBean().getProductID2() > 0)
                        {
                            data.productType2 = building.getLevelBean().getProductID2();
                            data.productCount2 += building.getLevelBean().getProductCount2();
                        }
                    }

                    list.add(data);
                }
            }
        }

        return list;
    }

    /**
     * 取得工业生产数据
     * 
     * @return
     */
    public BuildingIndustryProductData getIndustryProduct(int industryType)
    {
        BuildingIndustryInfo info = industryMap.get(industryType);
        if (info != null && info.getIsWorking())
        {
            List<BaseBuilding> buildings = getBuildingListByIndustryType(info.getIndustryType());
            if (!buildings.isEmpty())
            {
                BuildingIndustryProductData data = new BuildingIndustryProductData();
                data.industryType = info.getIndustryType();

                for (BaseBuilding building : buildings)
                {
                    if (building.getLevelBean().getResourceID() > 0)
                    {
                        data.resType = building.getLevelBean().getResourceID();
                        data.resCount += building.getLevelBean().getResourceCount();
                    }

                    if (building.getLevelBean().getProductID1() > 0)
                    {
                        data.productType1 = building.getLevelBean().getProductID1();
                        data.productCount1 += building.getLevelBean().getProductCount1();
                    }

                    if (building.getLevelBean().getProductID2() > 0)
                    {
                        data.productType2 = building.getLevelBean().getProductID2();
                        data.productCount2 += building.getLevelBean().getProductCount2();
                    }
                }

                return data;
            }
        }

        return null;
    }

    /*********************************** 定时任务 *********************************************/

    /**
     * 定时任务-人口增长
     */
    public BuildingResData refreshPolulace()
    {
        BuildingResData returnData = new BuildingResData();

        int leftCount = getBuildingTotalPopulace() - city.getPopulace();
        if (leftCount <= 0)
            return returnData;

        // 1.建筑实际增长值 = 建筑配置增长值 * （1 - ∑周边建筑污染度 ）*（1 - ∑其他加成值）；
        // 2.本城增长值 = ∑本城建筑实际增长值；
        // 3.本城消耗值 = 本城增长值 * 单位人口增长消耗；

        List<BaseBuilding> list = getBuildingListBySubType(WorldSceneAllType.BUILDING_BASE_SUB2);

        // 计算增长值
        int totalCount = 0;
        for (BaseBuilding baseBuilding : list)
        {
            // 1.建筑实际增长值 = 建筑配置增长值 * （1 - ∑周边建筑污染度 ）*（1 + ∑其他加成值）；
            int baseCount = (int) baseBuilding.getLevelBean().getEffectValue1();

            List<BaseBuilding> decreaseList = getBuildingListByDistance(baseBuilding.getBuildingPos(), WorldSceneAllType.BUILDING_INDUSTRY_SUB1);
            // 污染减少率
            float dRate = 0.0f;
            for (BaseBuilding b : decreaseList)
            {
                // 治污厂降低污染
                List<BaseBuilding> temp = getBuildingListByDistance(baseBuilding.getBuildingPos(), WorldSceneAllType.BUILDING_INDUSTRY_SUB2);
                float value = 1.0f;
                for (BaseBuilding t : temp)
                {
                    value = value - t.getLevelBean().getEffectValue1();
                }
                value = value < 0 ? 0 : value;
                dRate += b.getLevelBean().getEffectValue1() * value;
            }

            // 科技增长率
            float aRate = 0.0f;

            // 2.本城增长值 = ∑本城建筑实际增长值；
            totalCount += (int) (baseCount * (1 - dRate) * (1 + aRate));
        }

        // 实际可增长数量
        totalCount = totalCount > leftCount ? leftCount : totalCount;
        // 3.本城消耗值 = 本城增长值 * 单位人口增长消耗；
        int totalRes = totalCount * GamePropertiesComponent.WORLD_POPULACE_FOOD;

        // 判断消耗
        if (totalRes <= PlayerResourceComponent.getResourceCount(city.getScenePlayer().getUserID(), ResourceType.FOOD.getValue()))
        {
            returnData.resCount = totalRes;
            returnData.productCount = totalCount;

            PlayerResourceComponent.removeResource(city.getScenePlayer().getUserID(), ResourceType.FOOD.getValue(), totalRes, ItemRemoveType.BUILDING_POLULACE);
            PlayerResourceComponent.addResource(city.getScenePlayer().getUserID(), ResourceType.POPULACE.getValue(), totalCount, ItemAddType.BUILDING_POLULACE);
        }

        return returnData;

    }

    /**
     * 定时任务-工业生产
     * 
     * @return
     */
    public List<BuildingIndustryProductData> refreshIndustry()
    {
        List<BuildingIndustryProductData> list = getIndustryProductList();

        long userID = city.getScenePlayer().getUserID();

        for (BuildingIndustryProductData data : list)
        {
            if (PlayerResourceComponent.checkResource(userID, data.resType, data.resCount))
            {
                PlayerResourceComponent.removeResource(userID, data.resType, data.resCount, ItemRemoveType.BUILDING_INDUSTRY_PRODUCT);
                if (data.productType1 > 0)
                    PlayerResourceComponent.addResource(userID, data.productType1, data.productCount1, ItemAddType.BUILDING_INDUSTRY_PRODUCT);
                if (data.productType2 > 0)
                    PlayerResourceComponent.addResource(userID, data.productType2, data.productCount2, ItemAddType.BUILDING_INDUSTRY_PRODUCT);
            }
            else
            {
                data.reset();
            }
        }

        return list;
    }

    /*********************************** 协议逻辑 **********************************************/

    /**
     * 创建建筑
     * 
     * @param buildingID
     * @param pos
     */
    public void createBuilding(GamePlayer gamePlayer, int buildingID, int pos)
    {
        if (map.get(pos) != null)
        {
            gamePlayer.sendErrorCode(ErrorCodeType.Building_Pos_Not_Null);
            return;
        }

        if (pos > getBagCount())
        {
            gamePlayer.sendErrorCode(ErrorCodeType.Building_Pos_Max);
            return;
        }

        BuildingBean bean = BuildingDataComponent.getBuildingBean(buildingID);
        int buildingLevel = gamePlayer.getBuildingModule().getBuildingCreateLevel(buildingID);
        if (buildingLevel <= 0)
        {
            buildingLevel = bean.getDefaultLevel();
        }

        // 建筑权限判断
        if (buildingLevel <= 0)
        {
            city.getScenePlayer().getGamePlayer().sendErrorCode(ErrorCodeType.Building_Not_Create);
            return;
        }

        BuildingLevelBean levelBean = BuildingDataComponent.getBuildingLevelBean(buildingID, buildingLevel);

        if (bean == null || levelBean == null)
        {
            gamePlayer.sendErrorCode(ErrorCodeType.Config_Error);
            return;
        }

        // 判断资源消耗
        int createCount = gamePlayer.getBuildingModule().getBuildingCreateCount(buildingID, buildingLevel);
        BuildingCreateBean createBean = BuildingDataComponent.getBuildingCreateBean(bean.getCreateRuleID(), buildingLevel, createCount + 1);
        if (createBean == null)
        {
            gamePlayer.sendErrorCode(ErrorCodeType.Building_Count_Max);
            return;
        }

        if (PlayerResourceComponent.checkResource(gamePlayer.getUserID(), ResourceType.WOOD.getValue(), createBean.getWoodCount()) == false
                || PlayerResourceComponent.checkResource(gamePlayer.getUserID(), createBean.getResID(), createBean.getResCount()) == false)
        {
            gamePlayer.sendErrorCode(ErrorCodeType.Not_Enough_Resource);
            return;
        }

        // 移除资源
        PlayerResourceComponent.removeResource(gamePlayer.getUserID(), ResourceType.WOOD.getValue(), createBean.getWoodCount(), ItemRemoveType.BUILDING_CREATE);
        PlayerResourceComponent.removeResource(gamePlayer.getUserID(), createBean.getResID(), createBean.getResCount(), ItemRemoveType.BUILDING_CREATE);

        BuildingInfo buildingInfo = new BuildingInfo();
        buildingInfo.setBuildingID(buildingID);
        buildingInfo.setBuildingLevel(buildingLevel);
        buildingInfo.setCityIndexID(city.getCityIndexID());
        buildingInfo.setCreateTime(new Date());
        buildingInfo.setPosition(pos);
        buildingInfo.setUpdateTime(new Date());
        buildingInfo.setUserID(city.getScenePlayer().getUserID());

        BaseBuilding baseBuilding = new BaseBuilding(bean, levelBean, buildingInfo);
        map.put(baseBuilding.getBuildingID(), baseBuilding);

        // 数据保存
        gamePlayer.getBuildingModule().addBuildingCreateCount(buildingID, buildingLevel, createCount + 1);
        gamePlayer.getBuildingModule().addBuildingCreateLevel(buildingID, buildingLevel);
        GameCacheComponent.getRemoteBuilding().updateBuildingInfo(buildingInfo);

        // 工业建筑
        if (bean.getOpenIndustryType() > 0 && bean.getMainType() == WorldSceneAllType.BUILDING_MAIN_INDUSTRY)
        {
            if (!industryMap.containsKey(bean.getOpenIndustryType()))
            {
                BuildingIndustryInfo industryInfo = new BuildingIndustryInfo();
                industryInfo.setCityIndexID(city.getCityIndexID());
                industryInfo.setCreateTime(new Date());
                industryInfo.setIndustryType(bean.getOpenIndustryType());
                industryInfo.setIsWorking(true);
                industryInfo.setUserID(city.getScenePlayer().getUserID());

                GameCacheComponent.getRemoteBuilding().updateBuildingIndustryInfo(industryInfo);
            }
        }

        BuildingCreateProtoOut.Builder builder = BuildingCreateProtoOut.newBuilder();
        builder.setBuildingIndexID(buildingInfo.getBuildingIndexID());
        builder.setBuildingLevel(buildingLevel);
        builder.setBuildingPos(pos);
        builder.setBuildlingID(buildingID);

        city.getScenePlayer().sendMessage(UserCmdOutType.BUILDING_CREATE_RETURN_VALUE, builder);
    }

    /**
     * 建筑升级
     * 
     * @param gamePlayer
     * @param pos1
     * @param pos2（主）
     */
    public void updateBuilding(GamePlayer gamePlayer, int pos1, int pos2)
    {
        BaseBuilding building1 = map.get(pos1);
        BaseBuilding building2 = map.get(pos2);

        if (building1 == null || building2 == null)
        {
            gamePlayer.sendErrorCode(ErrorCodeType.Building_Pos_Null);
            return;
        }

        // 等级判断
        if (building2.getBuildingLevel() >= BuildingDataComponent.getMaxLevel(building2.getBuildingID()))
        {
            gamePlayer.sendErrorCode(ErrorCodeType.Building_Level_Max);
            return;
        }

        // 类型判断
        if (building1.getLevelBean().getBuildingLevel() != building2.getLevelBean().getBuildingLevel()
                || building1.getBuildingID() != building2.getBuildingID())
        {
            gamePlayer.sendErrorCode(ErrorCodeType.Building_Update_Null);
            return;
        }

        // 更新数据
        BuildingLevelBean levelBean = BuildingDataComponent.getBuildingLevelBean(building2.getBuildingID(), building2.getBuildingLevel() + 1);
        building2.buildingUpdate(levelBean);

        map.remove(pos1);
        building1.destroy();

        // 发送结果
        BuildingUnionUpdateProtoOut.Builder builder = BuildingUnionUpdateProtoOut.newBuilder();
        builder.setBuildingPos1(pos1);
        builder.setBuildingPos1(pos2);
        builder.setLevel(building2.getBuildingLevel());

        gamePlayer.sendMessage(UserCmdOutType.BUILDING_UNION_UPDATE_RETURN_VALUE, builder);
    }

    /**
     * 更改建筑位置
     * 
     * @param player
     * @param oldPos
     * @param newPos
     */
    public void buildingChangePos(GamePlayer gamePlayer, int oldPos, int newPos)
    {
        BaseBuilding oldBuilding = map.get(oldPos);
        BaseBuilding newBuilding = map.get(newPos);

        if (oldBuilding == null)
        {
            gamePlayer.sendErrorCode(ErrorCodeType.Building_Pos_Null);
            return;
        }

        if (newBuilding != null)
        {
            gamePlayer.sendErrorCode(ErrorCodeType.Building_Pos_Not_Null);
            return;
        }

        map.remove(oldPos);
        map.put(newPos, oldBuilding);

        oldBuilding.changePos(newPos);

        BuildingChangePosProtoOut.Builder builder = BuildingChangePosProtoOut.newBuilder();
        builder.setBuildingIndexID(oldBuilding.getBuildingID());
        builder.setNewPos(newPos);
        gamePlayer.sendMessage(UserCmdOutType.BUILDING_CHANGE_POS_RETURN_VALUE, builder);
    }

    /**
     * 建筑销毁
     * 
     * @param player
     * @param buildingIndexID
     */
    public void buildingDestroy(GamePlayer player, int buildingIndexID)
    {
        BaseBuilding building = getBuildingByID(buildingIndexID);
        if (building == null)
        {
            player.sendErrorCode(ErrorCodeType.Building_Not_Exist);
            return;
        }

        map.remove(building.getBuildingPos());
        building.destroy();

        BuildingDestroyProtoOut.Builder builder = BuildingDestroyProtoOut.newBuilder();
        builder.setBuildingIndexID(buildingIndexID);
        player.sendMessage(UserCmdOutType.BUILDING_DESTROY_RETURN_VALUE, builder);
    }

    /**
     * 建筑背包位置互换
     * 
     * @param player
     * @param buildingIndexID
     * @param isToBag
     *            true:放入背包
     * @param toPos
     */
    public void buildingBagChange(GamePlayer player, int buildingIndexID, boolean isToBag, int toPos)
    {
        // 放入背包
        if (isToBag)
        {
            BaseBuilding building = getBuildingByID(buildingIndexID);
            if (building == null)
            {
                player.sendErrorCode(ErrorCodeType.Building_Not_Exist);
                return;
            }

            map.remove(building.getBuildingPos());
            player.getBuildingModule().addBuildingBag(building.getBuildingInfo());
        }
        else // 放入位置
        {
            BuildingInfo buildingInfo = player.getBuildingModule().getBuildingInfo(buildingIndexID);
            if (buildingInfo == null)
            {
                player.sendErrorCode(ErrorCodeType.Building_Bag_Null);
                return;
            }

            player.getBuildingModule().removeBuilding(buildingIndexID);

            BuildingBean bean = BuildingDataComponent.getBuildingBean(buildingInfo.getBuildingID());
            BuildingLevelBean levelBean = BuildingDataComponent.getBuildingLevelBean(buildingInfo.getBuildingID(), buildingInfo.getBuildingLevel());
            BaseBuilding building = new BaseBuilding(bean, levelBean, buildingInfo);

            map.put(toPos, building);
            buildingInfo.setPosition(toPos);
            buildingInfo.setCityIndexID(city.getCityIndexID());

            GameCacheComponent.getRemoteBuilding().updateBuildingInfo(buildingInfo);
        }

        BuildingBagChangeProtoOut.Builder builder = BuildingBagChangeProtoOut.newBuilder();
        builder.setIsSuccess(true);
        builder.setIsToBag(isToBag);

        player.sendMessage(UserCmdOutType.BUILDING_BAG_CHANGE_RETURN_VALUE, builder);
    }

    /**
     * 召集居民
     */
    public void buildingCallPeople(GamePlayer player)
    {
        // 计算剩余人口数
        int leftCount = getBuildingTotalPopulace() - city.getPopulace();
        if (leftCount <= 0)
        {
            player.sendErrorCode(ErrorCodeType.City_Max_Populace);
            return;
        }

        // 1.每次召集数 = 基础召集数 + ∑本城建筑召集数；
        int totalCount = GamePropertiesComponent.WORLD_POPULACE_CALL_BASE;
        List<BaseBuilding> buildingList = getBuildingListBySubType(WorldSceneAllType.BUILDING_BASE_SUB1);
        for (BaseBuilding building : buildingList)
        {
            totalCount += building.getLevelBean().getEffectValue1();
        }

        // 实际数量
        totalCount = totalCount > leftCount ? leftCount : totalCount;
        // 2.召集消耗 = 每次召集数 * 单位人口召集消耗
        int totalRes = totalCount * GamePropertiesComponent.WORLD_POPULACE_FOOD;

        // 判断消耗
        if (totalRes <= PlayerResourceComponent.getResourceCount(city.getScenePlayer().getUserID(), ResourceType.FOOD.getValue()))
        {
            PlayerResourceComponent.removeResource(city.getScenePlayer().getUserID(), ResourceType.FOOD.getValue(), totalRes, ItemRemoveType.BUILDING_POLULACE);
            PlayerResourceComponent.addResource(city.getScenePlayer().getUserID(), ResourceType.POPULACE.getValue(), totalCount, ItemAddType.BUILDING_POLULACE);
        }

        // 发送数据
        BuildingCallPeopleProtoOut.Builder builder = BuildingCallPeopleProtoOut.newBuilder();
        builder.setCallCount(totalCount);
        builder.setFoodCount(totalRes);

        player.sendMessage(UserCmdOutType.BUILDING_CALL_PEOPLE_RETURN_VALUE, builder);
    }

    /**
     * 召集士兵
     */
    public void buildingCallSoldier(GamePlayer player, int soldierID)
    {

    }

    /**
     * 工业生产暂停和开始
     * 
     * @param type
     * @param isWorking
     */
    public void buildingIndustry(GamePlayer player, int type, boolean isWorking)
    {
        BuildingIndustryInfo info = industryMap.get(type);
        if (info != null)
        {
            info.setIsWorking(isWorking);
        }
        else
        {
            player.sendErrorCode(ErrorCodeType.Building_Industry_Type_Null);
            return;
        }

        BuildingIndustryProtoOut.Builder builder = BuildingIndustryProtoOut.newBuilder();
        builder.setCityIndexID(city.getCityIndexID());
        builder.setIsWorking(isWorking);
        builder.setIndustryType(type);

        player.sendMessage(UserCmdOutType.BUILDING_INDUSTRY_RETURN_VALUE, builder);
    }

    /**
     * 发送建筑基础信息
     */
    public void sendBaseInfo(GamePlayer player)
    {
        BuildingBaseProtoOut.Builder builder = BuildingBaseProtoOut.newBuilder();
        builder.setCityIndexID(city.getCityIndexID());
        builder.setCityName(city.getCityName());
        builder.setDefence(city.getCityHP());
        builder.setArmyCount();
        
        builder.setPolulationMax(city.getPopulaceMax());
        builder.setPolulationCount(city.getPopulace());
        builder.setPolulationAdd(value);
        builder.setPolulationCall(value);
        
        player.sendMessage(UserCmdOutType.BUILDING_BASE_RETURN_VALUE, builder);
    }

}
