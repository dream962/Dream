package com.game.scene.module;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import com.base.code.ErrorCodeType;
import com.base.event.EventArg;
import com.base.event.IEventListener;
import com.data.bag.ItemRemoveType;
import com.data.bean.CityBean;
import com.data.bean.ScienceBean;
import com.data.bean.ScienceTreeBean;
import com.data.component.GamePropertiesComponent;
import com.data.info.CityInfo;
import com.data.info.ScienceInfo;
import com.data.type.ResourceType;
import com.game.WorldResWrapData.BuildingIndustryProductData;
import com.game.WorldResWrapData.BuildingResData;
import com.game.component.CityBuildingDataComponent;
import com.game.component.GameCacheComponent;
import com.game.event.EventScienceOverArg;
import com.game.event.GamePlayerEventType;
import com.game.scene.ScenePlayer;
import com.game.scene.WorldMathUtil;
import com.game.scene.WorldScene;
import com.game.scene.WorldSceneAllType.ArmyOperationType;
import com.game.scene.WorldSceneAllType.CityType;
import com.game.scene.WorldSceneAllType.ScienceAddType;
import com.game.scene.WorldSceneAllType.ScienceStatusType;
import com.game.scene.WorldSceneObjectFactory;
import com.game.scene.city.CityScience;
import com.game.scene.city.SceneCity;
import com.game.scene.role.SceneTeam;
import com.proto.building.gen.BuildingOutMsg.BuildingBaseProtoOut;
import com.proto.building.gen.BuildingOutMsg.ScienceDetail;
import com.proto.city.gen.CityOutMsg.CityBaseProtoOut;
import com.proto.city.gen.CityOutMsg.CityCreateProtoOut;
import com.proto.city.gen.CityOutMsg.CityPlaceProtoOut;
import com.proto.city.gen.CityOutMsg.CityProtectProtoOut;
import com.proto.city.gen.CityOutMsg.CityRecycleProtoOut;
import com.proto.city.gen.CityOutMsg.CityRemoveTeamProtoOut;
import com.proto.city.gen.CityOutMsg.CityRenameProtoOut;
import com.proto.city.gen.CityOutMsg.CityTeamProtoOut;
import com.proto.command.UserCmdType.UserCmdOutType;
import com.proto.common.gen.CommonOutMsg.ResourceDetail;
import com.proto.common.gen.CommonOutMsg.ResourceProto;
import com.proto.user.gen.UserOutMsg.ScienceActivateProtoOut;
import com.proto.user.gen.UserOutMsg.ScienceChangeProtoOut;
import com.proto.user.gen.UserOutMsg.ScienceStudyProtoOut;
import com.util.StringUtil;
import com.util.TimeUtil;
import com.util.print.LogFactory;
import com.util.wrapper.WrapPoint;

/**
 * 世界地图玩家城池模块
 * 
 * @author dream
 *
 */
public class SceneCityModule extends AbstractSceneModule
{
    /** 城池列表《城市主键ID，城池》 */
    private Map<Integer, SceneCity> cityMap = new HashMap<>();

    /** 科技信息《科技ID，数据》 */
    private Map<Integer, CityScience> scienceMap = new HashMap<>();

    private IEventListener cityUpdateListener;

    public SceneCityModule(ScenePlayer player)
    {
        super(player);
    }

    @Override
    public boolean load()
    {
        List<CityInfo> list = GameCacheComponent.getRemoteCity().getCityList(getUserID());

        for (CityInfo cityInfo : list)
        {
            CityBean bean = CityBuildingDataComponent.getCityBean(cityInfo.getCityID());
            SceneCity city = WorldSceneObjectFactory.loadCity(scenePlayer, cityInfo, bean);
            if (city != null)
                cityMap.put(cityInfo.getCityIndexID(), city);
            else
                LogFactory.error("严重错误：城池初始化失败。userID:{},cityIndex:{},cityID:{}", getUserID(), cityInfo.getCityIndexID(), cityInfo.getCityID());
        }

        List<ScienceInfo> list1 = GameCacheComponent.getRemoteCity().getScienceList(getUserID());
        for (ScienceInfo info : list1)
        {
            CityScience science = new CityScience(info);
            scienceMap.put(info.getScienceID(), science);
        }

        cityUpdateListener = (e) -> cityUpdate(e);
        scenePlayer.getEvent().addListener(GamePlayerEventType.Science_Over, cityUpdateListener);

        return true;
    }

    private void cityUpdate(EventArg e)
    {
        EventScienceOverArg arg = (EventScienceOverArg) e;
        ScienceBean scienceBean = arg.science.getBean();

        // 城池升级
        if (scienceBean.getAddType() == ScienceAddType.CITY_UPDATE)
        {
            if (scienceBean.getTargetID1() > 0)
            {
                List<SceneCity> cityList = getCityListByCityType(scienceBean.getTargetID1());
                for (SceneCity city : cityList)
                {
                    city.levelUpdate(scienceBean.getParam1());
                }
            }

            if (scienceBean.getTargetID2() > 0)
            {
                List<SceneCity> cityList = getCityListByCityType(scienceBean.getTargetID2());
                for (SceneCity city : cityList)
                {
                    city.levelUpdate(scienceBean.getParam1());
                }
            }

            if (scienceBean.getTargetID3() > 0)
            {
                List<SceneCity> cityList = getCityListByCityType(scienceBean.getTargetID3());
                for (SceneCity city : cityList)
                {
                    city.levelUpdate(scienceBean.getParam1());
                }
            }

            if (scienceBean.getTargetID4() > 0)
            {
                List<SceneCity> cityList = getCityListByCityType(scienceBean.getTargetID4());
                for (SceneCity city : cityList)
                {
                    city.levelUpdate(scienceBean.getParam1());
                }
            }
        }
    }

    @Override
    public void update(long time)
    {
        List<SceneCity> list = getAllCity();
        // 城市更新
        for (SceneCity city : list)
        {
            city.update(time);
        }

        // 科技更新
        for (Entry<Integer, Map<Integer, CityScience>> entry : scienceMap.entrySet())
        {
            SceneCity city = getCityByID(entry.getKey());
            for (CityScience science : entry.getValue().values())
            {
                if (science.scienceInfo.getScienceStatus() == ScienceStatusType.STUDYING)
                {
                    // 研发效率
                    int study = city.getStudyPower(science.getTreeBean().getTreeID());
                    if (study <= 0)
                        continue;

                    // 已经研发的时间
                    int interval = (int) (time - science.scienceInfo.getUpdateTime().getTime());
                    int finishValue = interval * study;
                    // 剩余研发值
                    int leftValue = science.scienceInfo.getLeftStudyValue() - finishValue;
                    leftValue = leftValue < 0 ? 0 : leftValue;
                    // 研发时间 = 研发值/该类型总研发效率
                    int studyTime = leftValue / study;

                    science.scienceInfo.setUpdateTime(new Date());
                    science.scienceInfo.setLeftStudyValue(leftValue);

                    // 5秒误差内都算完成
                    if (studyTime <= 5)
                    {
                        science.scienceInfo.setLeftStudyValue(0);
                        science.scienceInfo.setScienceStatus(ScienceStatusType.FINISH);
                    }

                    GameCacheComponent.getRemoteCity().updateScienceInfo(science.scienceInfo);
                }
            }
        }
    }

    /**
     * 定时刷新人口增长
     */
    public void refreshPolulace()
    {
        List<SceneCity> list = getAllCity();
        // 按照创建日期排序
        list.sort((p1, p2) -> {
            return (int) (p1.getCityInfo().getCreateTime().getTime() - p2.getCityInfo().getCreateTime().getTime());
        });

        // 计算人口增长
        List<BuildingResData> buildingResList = new ArrayList<>();
        for (SceneCity city : list)
        {
            if (city.getCityType() == CityType.CITY_SUB || city.getCityType() == CityType.CITY_MAIN)
            {
                BuildingResData data = city.refreshPolulace();
                if (data != null)
                    buildingResList.add(data);
            }
        }

        // 同步资源消耗和增长
        ResourceProto.Builder builder = ResourceProto.newBuilder();
        builder.setUserID(scenePlayer.getUserID());

        int res = 0;
        int pro = 0;
        for (BuildingResData d : buildingResList)
        {
            res += d.resCount;
            pro += d.productCount;
        }
        ResourceDetail.Builder detail1 = ResourceDetail.newBuilder();
        detail1.setResourceCount(-res);
        detail1.setResourceType(ResourceType.FOOD.getValue());
        builder.addResources(detail1);

        ResourceDetail.Builder detail2 = ResourceDetail.newBuilder();
        detail2.setResourceCount(pro);
        detail2.setResourceType(ResourceType.POPULACE.getValue());
        builder.addResources(detail2);

        scenePlayer.sendMessage(UserCmdOutType.RESOURCE_RETURN_VALUE, builder);
    }

    /**
     * 定时刷新工业生产
     */
    public void refreshProduct()
    {
        List<SceneCity> list = getAllCity();
        // 按照创建日期排序
        list.sort((p1, p2) -> {
            return (int) (p1.getCityInfo().getCreateTime().getTime() - p2.getCityInfo().getCreateTime().getTime());
        });

        // 同步资源消耗和工业品增长
        ResourceProto.Builder builder = ResourceProto.newBuilder();
        builder.setUserID(scenePlayer.getUserID());

        for (SceneCity city : list)
        {
            if (city.getCityType() == CityType.CITY_SUB || city.getCityType() == CityType.CITY_MAIN)
            {
                List<BuildingIndustryProductData> products = city.refreshProduct();

                if (products != null)
                {
                    for (BuildingIndustryProductData product : products)
                    {
                        ResourceDetail.Builder detail1 = ResourceDetail.newBuilder();
                        detail1.setResourceCount(-product.resCount);
                        detail1.setResourceType(product.resType);
                        builder.addResources(detail1);

                        ResourceDetail.Builder detail2 = ResourceDetail.newBuilder();
                        detail2.setResourceCount(product.productCount1);
                        detail2.setResourceType(product.productType1);
                        builder.addResources(detail2);

                        ResourceDetail.Builder detail3 = ResourceDetail.newBuilder();
                        detail3.setResourceCount(product.productCount2);
                        detail3.setResourceType(product.productType2);
                        builder.addResources(detail3);
                    }
                }
            }
        }

        scenePlayer.sendMessage(UserCmdOutType.RESOURCE_RETURN_VALUE, builder);
    }

    @Override
    public void save()
    {
        for (Map<Integer, CityScience> map : scienceMap.values())
        {
            for (CityScience science : scienceMap.values())
                GameCacheComponent.getRemoteCity().updateScienceInfo(science.scienceInfo);
        }
    }

    /********************************** 基础信息 *****************************************/

    /**
     * 取得城池背包里的城池信息
     * 
     * @return
     */
    public List<SceneCity> getCityBag()
    {
        List<SceneCity> list = new ArrayList<>();

        for (SceneCity city : cityMap.values())
        {
            if (city.getCityInfo().getIsInMap() == false)
            {
                list.add(city);
            }
        }

        return list;
    }

    /**
     * 取得所有城池信息
     * 
     * @return
     */
    public List<SceneCity> getAllCity()
    {
        List<SceneCity> list = new ArrayList<>();

        for (SceneCity city : cityMap.values())
        {
            list.add(city);
        }

        return list;
    }

    /**
     * 根据城市ID取得城市信息
     * 
     * @param cityIndexID
     * @return
     */
    public SceneCity getCityByID(int cityIndexID)
    {
        return cityMap.get(cityIndexID);
    }

    /**
     * 根据城市类型取得城市列表
     * 
     * @param cityType
     * @return
     */
    public List<SceneCity> getCityListByCityType(int cityType)
    {
        List<SceneCity> list = new ArrayList<>();

        for (SceneCity city : cityMap.values())
        {
            if (city.getCityBean().getCityType() == cityType)
                list.add(city);
        }

        return list;
    }

    /**
     * 计算城池占领的土地单元ID
     * 
     * @param cityID
     * @param fieldID
     * @return
     */
    private List<Integer> calCityFieldByType(int cityID, int cityDir, int fieldID, int row, int col)
    {
        CityBean cityBean = CityBuildingDataComponent.getCityBean(cityID);
        if (cityBean != null)
        {
            if (cityBean.getCityType() == CityType.CITY_FORT)
            {
                WrapPoint point = WorldMathUtil.calNodeToPoint(fieldID, col, row);
                if (point != null)
                    return WorldMathUtil.calFortField(point.x, point.y, col, row, cityDir);
            }
            else
            {
                List<Integer> list = new ArrayList<>();
                list.add(fieldID);
                return list;
            }
        }

        return null;
    }

    /********************************** 城市操作 *****************************************/
    /**
     * 创建城池
     * 
     * @param cityID
     * @param fieldID
     * @param cityDir
     */
    public void createCity(int cityID, int fieldID, int cityDir)
    {
        // 判断条件
        CityBean cityBean = CityBuildingDataComponent.getCityBean(cityID);
        if (cityBean == null)
        {
            getGamePlayer().sendErrorCode(ErrorCodeType.City_Create_Error);
            return;
        }

        WorldScene scene = getScene();
        List<Integer> fields = calCityFieldByType(cityID, cityDir, fieldID, scene.getMap().getRow(), scene.getMap().getColumn());

        // 创建数据
        CityInfo cityInfo = new CityInfo();
        cityInfo.setCityDir(cityDir);
        cityInfo.setCityID(cityID);
        cityInfo.setCreateTime(new Date());
        cityInfo.setUserID(getUserID());
        cityInfo.setIsInMap(true);
        cityInfo.setIsProtected(false);
        cityInfo.setCityState(0);
        String pos = StringUtil.mergeInt(fields, ",");
        cityInfo.setScenePos(pos);

        SceneCity city = WorldSceneObjectFactory.createCity(scenePlayer, cityInfo, cityBean);
        if (city != null)
        {
            cityMap.put(city.getCityIndexID(), city);
            GameCacheComponent.getRemoteCity().updateCityInfo(cityInfo);
        }

        CityCreateProtoOut.Builder builder = CityCreateProtoOut.newBuilder();
        builder.setUserID(getUserID());
        builder.setCityDir(cityDir);
        builder.setFieldID(fieldID);
        builder.setCityID(cityID);
        builder.setCityIndexID(cityInfo.getCityIndexID());

        getScene().sendToAll(UserCmdOutType.CITY_CREATE_RETURN_VALUE, builder, null);
    }

    /**
     * 放置城池
     * 
     * @param cityIndexID
     * @param fieldID
     * @param cityDir
     */
    public void placeCity(int cityIndexID, int fieldID, int cityDir)
    {
        SceneCity baseCity = cityMap.get(cityIndexID);
        if (baseCity == null)
        {
            getGamePlayer().sendErrorCode(ErrorCodeType.City_Not_Exist);
            return;
        }

        if (baseCity.getCityInfo().getIsInMap())
        {
            getGamePlayer().sendErrorCode(ErrorCodeType.City_Has_Exist);
            return;
        }

        baseCity.getCityInfo().setIsInMap(true);
        baseCity.getCityInfo().setCityDir(cityDir);
        List<Integer> fields = calCityFieldByType(baseCity.getCityBean().getCityID(), cityDir, fieldID, getScene().getMap().getRow(), getScene().getMap().getColumn());
        baseCity.getCityInfo().setScenePos(StringUtil.mergeInt(fields, ","));

        GameCacheComponent.getRemoteCity().updateCityInfo(baseCity.getCityInfo());

        CityPlaceProtoOut.Builder builder = CityPlaceProtoOut.newBuilder();
        builder.setUserID(getUserID());
        builder.setCityDir(cityDir);
        builder.setFieldID(fieldID);
        builder.setCityIndexID(baseCity.getCityInfo().getCityIndexID());

        getScene().sendToAll(UserCmdOutType.CITY_PLACE_RETURN_VALUE, builder, null);
    }

    /**
     * 城池重命名
     * 
     * @param cityIndexID
     * @param name
     */
    public void renameCity(int cityIndexID, String name)
    {
        SceneCity baseCity = cityMap.get(cityIndexID);
        if (baseCity == null)
        {
            getGamePlayer().sendErrorCode(ErrorCodeType.City_Not_Exist);
            return;
        }

        baseCity.getCityInfo().setCityName(name);
        GameCacheComponent.getRemoteCity().updateCityInfo(baseCity.getCityInfo());

        CityRenameProtoOut.Builder builder = CityRenameProtoOut.newBuilder();
        builder.setCityIndexID(cityIndexID);
        builder.setName(name);
        builder.setUserID(getUserID());

        getScene().sendToAll(UserCmdOutType.CITY_RENAME_RETURN_VALUE, builder, null);
    }

    /**
     * 保护城池
     * 
     * @param cityIndexID
     */
    public void protectCity(int cityIndexID)
    {
        SceneCity baseCity = cityMap.get(cityIndexID);
        if (baseCity == null)
        {
            getGamePlayer().sendErrorCode(ErrorCodeType.City_Not_Exist);
            return;
        }

        if (baseCity.getCityBean().getCityType() != CityType.CITY_MAIN || baseCity.getCityBean().getCityType() != CityType.CITY_SUB)
        {
            getGamePlayer().sendErrorCode(ErrorCodeType.City_Type_Error);
            return;
        }

        // 以此作为目标的军队将立刻回城，并返还部分行军资源

        baseCity.getCityInfo().setIsProtected(true);
        baseCity.getCityInfo().setProtectedTime(new Date());
        GameCacheComponent.getRemoteCity().updateCityInfo(baseCity.getCityInfo());

        CityProtectProtoOut.Builder builder = CityProtectProtoOut.newBuilder();
        builder.setCityIndexID(cityIndexID);
        builder.setUserID(getUserID());

        getScene().sendToAll(UserCmdOutType.CITY_PROTECT_RETURN_VALUE, builder, null);
    }

    /**
     * 维修城池
     * 
     * @param cityIndexID
     */
    public void repairCity(int cityIndexID)
    {
        SceneCity baseCity = cityMap.get(cityIndexID);
        if (baseCity == null)
        {
            getGamePlayer().sendErrorCode(ErrorCodeType.City_Not_Exist);
            return;
        }

        // 维修消耗
    }

    /**
     * 主动回收城池
     * 
     * @param cityIndexID
     */
    public void recycleCity(int cityIndexID)
    {
        SceneCity baseCity = cityMap.get(cityIndexID);
        if (baseCity == null)
        {
            getGamePlayer().sendErrorCode(ErrorCodeType.City_Not_Exist);
            return;
        }

        // 时间未到
        if (TimeUtil.timeSpan(baseCity.getCityInfo().getRecycleTime(), new Date(), "sec") <= GamePropertiesComponent.CITY_RECYCLE_CDTIME)
        {
            getGamePlayer().sendErrorCode(ErrorCodeType.City_Cold_Time);
            return;
        }

        // 以此作为目标的军队将立刻回城，并返还部分行军资源

        baseCity.getCityInfo().setIsInMap(false);
        baseCity.getCityInfo().setCityState(1);
        baseCity.getCityInfo().setRecycleTime(new Date());
        GameCacheComponent.getRemoteCity().updateCityInfo(baseCity.getCityInfo());

        CityRecycleProtoOut.Builder builder = CityRecycleProtoOut.newBuilder();
        builder.setCityIndexID(cityIndexID);
        builder.setUserID(getUserID());

        getScene().sendToAll(UserCmdOutType.CITY_RECYCLE_RETURN_VALUE, builder, null);
    }

    /**
     * 军队入驻
     * 
     * @param cityIndexID
     * @param teamID
     */
    public void addTeam(int cityIndexID, int teamID)
    {
        SceneCity baseCity = getCityByID(cityIndexID);
        if (baseCity == null)
        {
            getGamePlayer().sendErrorCode(ErrorCodeType.City_Not_Exist);
            return;
        }

        SceneTeam team = scenePlayer.getHeroTeamModule().getSceneTeam(teamID);
        if (team.getTeamStatus() != ArmyOperationType.ARMY_IDLE)
        {
            scenePlayer.getGamePlayer().sendErrorCode(ErrorCodeType.TEAM_STATUS_ERROR);
            return;
        }

        team.changeStatus(ArmyOperationType.ARMY_CITY_DEFENCE);
        baseCity.addTeam(team);

        CityTeamProtoOut.Builder builder = baseCity.getTeamProto(teamID);
        scenePlayer.sendMessage(UserCmdOutType.CITY_ADD_TEAM_RETURN_VALUE, builder);
    }

    /**
     * 军队取消入驻
     * 
     * @param cityIndexID
     * @param teamID
     */
    public void removeTeam(int cityIndexID, int teamID)
    {
        SceneCity baseCity = getCityByID(cityIndexID);
        if (baseCity == null)
        {
            getGamePlayer().sendErrorCode(ErrorCodeType.City_Not_Exist);
            return;
        }

        SceneTeam team = baseCity.getTeam(teamID);
        if (team == null)
        {
            getGamePlayer().sendErrorCode(ErrorCodeType.City_Team_Not_Exist);
            return;
        }

        baseCity.removeTeam(teamID);
        team.changeStatus(ArmyOperationType.ARMY_IDLE);

        CityRemoveTeamProtoOut.Builder builder = CityRemoveTeamProtoOut.newBuilder();
        builder.setTeamID(teamID);
        scenePlayer.sendMessage(UserCmdOutType.CITY_REMOVE_TEAM_RETURN_VALUE, builder);
    }

    /**************************************** 科技操作 *********************************************/
    /**
     * 添加科技信息
     * 
     * @param info
     */
    private void addCityScience(ScienceInfo info)
    {
        CityScience science = new CityScience(info);
        scienceMap.put(info.getScienceID(), science);
    }

    /**
     * 是否包含已经研发完成的指定科技
     * 
     * @param scienceID
     * @return
     */
    private boolean isContainOverScience(int scienceID)
    {
        if (scienceID <= 0)
            return true;

        CityScience science = getCityScience(scienceID);
        if (science != null && science.scienceInfo.getScienceStatus() == ScienceStatusType.OVER)
            return true;

        return false;
    }

    /**
     * 判断科技类型中是否有在研发中
     * 
     * @param scienceTreeID
     * @return
     */
    public boolean isStudyingScience(int scienceTreeID)
    {
        for (CityScience science : scienceMap.values())
        {
            ScienceTreeBean bean = CityBuildingDataComponent.getScienceTreeBean(science.scienceInfo.getScienceID());
            if (science.scienceInfo.getScienceStatus() == ScienceStatusType.STUDYING && bean.getTreeID() == scienceTreeID)
                return true;
        }

        return false;
    }

    /**
     * 计算研发时间
     * 
     * @param cityIndexID
     * @param scienceID
     * @return
     */
    private int getStudyTime(int scienceID)
    {
        ScienceTreeBean treeBean = CityBuildingDataComponent.getScienceTreeBean(scienceID);
        if (treeBean == null)
            return -1;

        // 计算研发时间
        ScienceBean scienceBean = CityBuildingDataComponent.getScienceBean(scienceID);

        int studyPower = city.getStudyPower(treeBean.getTreeID());
        int studyValue = scienceBean.getStudyValue();
        CityScience cityScience = getCityScience(scienceID);
        if (cityScience != null)
            studyValue = cityScience.scienceInfo.getLeftStudyValue();

        if (studyPower > 0)
            return studyValue / studyPower;
        else
            return -1;
    }

    /**
     * 激活科技
     * 
     * @param science
     */
    private void activateScience(CityScience science)
    {
        science.scienceInfo.setScienceStatus(ScienceStatusType.OVER);
        science.scienceInfo.setLeftStudyValue(0);
        science.scienceInfo.setUpdateTime(new Date());
        GameCacheComponent.getRemoteCity().updateScienceInfo(science.scienceInfo);

        // 事件广播
        scenePlayer.getEvent().notifyListeners(new EventScienceOverArg(GamePlayerEventType.Science_Over, science));

        ScienceActivateProtoOut.Builder builder = ScienceActivateProtoOut.newBuilder();
        builder.setScienceID(science.scienceInfo.getScienceID());

        scenePlayer.sendMessage(UserCmdOutType.SCIENCE_ACTIVATE_RETURN_VALUE, builder);
    }

    /**
     * 取得某类科技的加成信息
     * 
     * @param cityIndexID
     * @return
     */
    public Map<Integer, CityScience> getCityScienceList(int scienceAddType)
    {
        Map<Integer, CityScience> result = new HashMap<>();

        for (CityScience science : scienceMap.values())
        {
            ScienceBean bean = science.getBean();
            if (bean.getAddType() == scienceAddType)
            {
                // 排序取得不同种类最高级
                if (result.containsKey(bean.getScienceType()))
                {
                    if (bean.getPriority() > result.get(bean.getScienceType()).getBean().getPriority())
                        result.put(bean.getScienceType(), science);
                }
                else
                {
                    result.put(bean.getScienceType(), science);
                }
            }
        }

        return result;
    }

    /**
     * 取得科技
     * 
     * @param scienceID
     * @return
     */
    public CityScience getCityScience(int scienceID)
    {
        CityScience science = scienceMap.get(scienceID);
        if (science != null)
            return science;

        return null;
    }

    /**
     * 研究新科技
     * 
     * @param isFree
     *            免费 和 一键完成
     * @param scienceID
     * @param param
     */
    public void studyScience(boolean isFree, int scienceID, int param)
    {
        // 是否已经研究过
        CityScience science = getCityScience(scienceID);
        if (science != null)
        {
            scenePlayer.getGamePlayer().sendErrorCode(ErrorCodeType.Science_Studied);
            return;
        }

        ScienceTreeBean treeBean = science.getTreeBean();
        // 文明度
        if (scenePlayer.getCivilizationLevel() < treeBean.getCivilizationLevel())
        {
            scenePlayer.getGamePlayer().sendErrorCode(ErrorCodeType.Civilization_Less);
            return;
        }

        // 前置科技
        if (!isContainOverScience(treeBean.getPreScienceID1()) || !isContainOverScience(treeBean.getPreScienceID2())
                || !isContainOverScience(treeBean.getPreScienceID3()) || !isContainOverScience(treeBean.getPreScienceID4()))
        {
            scenePlayer.getGamePlayer().sendErrorCode(ErrorCodeType.Science_Condition);
            return;
        }

        // 同类型唯一
        if (isStudyingScience(treeBean.getTreeID()))
        {
            scenePlayer.getGamePlayer().sendErrorCode(ErrorCodeType.Science_Same_Type);
            return;
        }

        ScienceInfo info = new ScienceInfo();
        info.setUpdateTime(new Date());
        info.setParam(param);
        info.setUserID(getUserID());
        info.setScienceID(scienceID);

        // 计算研发时间
        ScienceBean scienceBean = CityBuildingDataComponent.getScienceBean(scienceID);
        int time = getStudyTime(scienceID);

        if (isFree)
        {
            info.setScienceStatus(ScienceStatusType.STUDYING);
            info.setLeftStudyValue(scienceBean.getStudyValue());
            addCityScience(info);

            GameCacheComponent.getRemoteCity().updateScienceInfo(info);

            ScienceStudyProtoOut.Builder builder = ScienceStudyProtoOut.newBuilder();
            builder.setScienceID(scienceID);
            builder.setParam(param);
            builder.setStudyTime(time);

            scenePlayer.sendMessage(UserCmdOutType.SCIENCE_STUDY_RETURN_VALUE, builder);
        }
        else
        {
            int total = (int) (scienceBean.getItemCount() * time);

            if (!scenePlayer.getResourceModule().checkResource(scienceBean.getItemID(), total))
            {
                scenePlayer.getGamePlayer().sendErrorCode(ErrorCodeType.Not_Enough_Resource);
                return;
            }

            scenePlayer.getResourceModule().removeResource(scienceBean.getItemID(), total, ItemRemoveType.SCIENCE_SPEED);

            addCityScience(info);
            activateScience(science);
        }
    }

    /**
     * 加速科技研发
     * 
     * @param scienceID
     */
    public void speedScience(int scienceID)
    {
        CityScience science = getCityScience(scienceID);
        if (science == null)
        {
            scenePlayer.getGamePlayer().sendErrorCode(ErrorCodeType.Science_Not_Exist);
            return;
        }

        if (science.scienceInfo.getScienceStatus() != ScienceStatusType.STUDYING)
        {
            scenePlayer.getGamePlayer().sendErrorCode(ErrorCodeType.Science_Status_Error);
            return;
        }

        // 计算研发时间
        ScienceBean bean = CityBuildingDataComponent.getScienceBean(scienceID);
        if (bean == null)
        {
            scenePlayer.getGamePlayer().sendErrorCode(ErrorCodeType.Config_Error);
            return;
        }

        int time = getStudyTime(scienceID);

        int total = (int) (bean.getItemCount() * time);

        if (!scenePlayer.getResourceModule().checkResource(bean.getItemID(), total))
        {
            scenePlayer.getGamePlayer().sendErrorCode(ErrorCodeType.Not_Enough_Resource);
            return;
        }

        scenePlayer.getResourceModule().removeResource(bean.getItemID(), total, ItemRemoveType.SCIENCE_SPEED);
        activateScience(science);
    }

    /**
     * 更改科研状态
     * 
     * @param scienceID
     */
    public void changeScience(int scienceID, boolean isPause)
    {
        CityScience science = getCityScience(scienceID);
        if (science == null)
        {
            scenePlayer.getGamePlayer().sendErrorCode(ErrorCodeType.Science_Not_Exist);
            return;
        }

        if (science.scienceInfo.getScienceStatus() != ScienceStatusType.STUDYING && science.scienceInfo.getScienceStatus() != ScienceStatusType.PAUSE)
        {
            scenePlayer.getGamePlayer().sendErrorCode(ErrorCodeType.Science_Status_Error);
            return;
        }

        if (isPause)
            science.scienceInfo.setScienceStatus(ScienceStatusType.PAUSE);
        else
        {
            science.scienceInfo.setUpdateTime(new Date());
            science.scienceInfo.setScienceStatus(ScienceStatusType.STUDYING);
        }

        GameCacheComponent.getRemoteCity().updateScienceInfo(science.scienceInfo);

        ScienceChangeProtoOut.Builder builder = ScienceChangeProtoOut.newBuilder();
        builder.setScienceID(scienceID);
        builder.setIsPause(isPause);

        scenePlayer.sendMessage(UserCmdOutType.SCIENCE_CHANGE_STATUS_RETURN_VALUE, builder);
    }

    /**
     * 激活科技
     * 
     * @param scienceID
     */
    public void activateScience(int scienceID)
    {
        CityScience science = getCityScience(scienceID);
        if (science == null)
        {
            scenePlayer.getGamePlayer().sendErrorCode(ErrorCodeType.Science_Not_Exist);
            return;
        }

        if (science.scienceInfo.getScienceStatus() != ScienceStatusType.FINISH)
        {
            scenePlayer.getGamePlayer().sendErrorCode(ErrorCodeType.Science_Status_Error);
            return;
        }

        activateScience(science);
    }

    /**
     * 取得科技信息
     * 
     * @param cityIndexID
     * @return
     */
    public List<ScienceDetail> getScienceList()
    {
        List<ScienceDetail> list = new ArrayList<>();

        for (CityScience science : scienceMap.values())
        {
            ScienceDetail.Builder builder = ScienceDetail.newBuilder();
            int time = getStudyTime(science.scienceInfo.getScienceID());
            builder.setLeftTime(time);
            builder.setParam(science.scienceInfo.getParam());
            builder.setScienceID(science.scienceInfo.getScienceID());
            builder.setScienceStatus(science.scienceInfo.getScienceStatus());
            builder.setScienceTreeType(science.getTreeBean().getTreeID());

            list.add(builder.build());
        }

        return list;
    }

    /************************************** 发送数据 *******************************************/

    /**
     * 发送城市内建筑基础信息
     */
    public void sendBaseInfo(int cityIndexID)
    {
        SceneCity city = getCityByID(cityIndexID);
        if (city == null)
        {
            scenePlayer.getGamePlayer().sendErrorCode(ErrorCodeType.City_Not_Exist);
            return;
        }

        CityBaseProtoOut.Builder cityBuilder = CityBaseProtoOut.newBuilder();
        cityBuilder.setCityIndexID(city.getCityIndexID());
        cityBuilder.setCityName(city.getCityName());
        cityBuilder.setDefence(city.getCityHP());

        // 建筑信息
        BuildingBaseProtoOut.Builder building = BuildingBaseProtoOut.newBuilder();
        building.setPolulationMax(city.getPopulaceMax());
        building.setPolulationCount(city.getPopulace());
        building.setPolulationAdd(city.getBuildingBag().getPolulaceAddCount());

        // 科技信息
        List<ScienceDetail> scienceDetails = getScienceList();
        building.addAllSciences(scienceDetails);

        cityBuilder.setBuilding(building);

        // 驻军信息
        List<SceneTeam> teamList = city.getTeamList();
        for (SceneTeam team : teamList)
        {
            CityTeamProtoOut.Builder teamBuilder = city.getTeamProto(team.getTeamID());
            cityBuilder.addTeams(teamBuilder);
        }

        scenePlayer.sendMessage(UserCmdOutType.BUILDING_BASE_RETURN_VALUE, cityBuilder);
    }

}
