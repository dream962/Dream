package com.game.scene.army;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import com.base.event.EventArg;
import com.base.event.IEventListener;
import com.data.bean.MineBean;
import com.data.bean.factory.MineBeanFactory;
import com.data.component.GamePropertiesComponent;
import com.data.info.SceneAreaInfo;
import com.data.info.SceneArmyInfo;
import com.game.component.GameCacheComponent;
import com.game.component.GamePlayerComponent;
import com.game.object.player.GamePlayer;
import com.game.scene.ScenePlayer;
import com.game.scene.WorldField;
import com.game.scene.WorldScene;
import com.game.scene.WorldSceneAllType.ArmyActionType;
import com.game.scene.WorldSceneAllType.ArmyStateType;
import com.game.scene.parm.TriggerChangeStateArg;
import com.game.scene.role.SceneTeam;
import com.proto.command.UserCmdType.UserCmdOutType;
import com.proto.world.gen.WorldOutMsg.ArmyStateProtoOut;
import com.proto.world.gen.WorldOutMsg.CaptureFieldProtoOut;
import com.proto.world.gen.WorldOutMsg.ViewArmyRemoveProtoOut;
import com.proto.world.gen.WorldOutMsg.ViewArmyUpdateProtoOut;
import com.proto.world.gen.WorldOutMsg.WorldArmyDetail;
import com.proto.world.gen.WorldOutMsg.WorldArmyReturnProtoOut;
import com.proto.world.gen.WorldOutMsg.WorldBreakUpProtoOut;
import com.util.StringUtil;
import com.util.print.PrintFactory;

/**
 * 世界地图上的行军部队
 * 
 * @author dream
 *
 */
public class SceneBaseArmy
{
    /** 场景玩家 */
    protected ScenePlayer scenePlayer;
    /** 军队信息 */
    protected SceneArmyInfo sceneArmyInfo;
    /** 场景队伍 */
    protected SceneTeam team;
    /** 状态改变监听 */
    protected IEventListener stateListener;
    /** 寻路路径（完整路径，包括起始、终止）使用时要至少删除3个点 */
    protected List<Integer> paths = new ArrayList<>();
    /** 目标点 */
    protected WorldField targetField;
    /** 行军结束点 */
    protected WorldField stopField;

    public SceneBaseArmy(ScenePlayer player, SceneTeam team)
    {
        this.scenePlayer = player;
        this.team = team;
    }

    public boolean init(SceneArmyInfo armyInfo)
    {
        this.sceneArmyInfo = armyInfo;
        this.team.changeStatus(armyInfo.getArmyType());
        stateListener = (e) -> onTriggerChangeState(e);
        return true;
    }

    public SceneArmyInfo getArmyInfo()
    {
        return sceneArmyInfo;
    }

    public int getTeamID()
    {
        return team.getTeamID();
    }

    public long getUserID()
    {
        if (scenePlayer != null)
            return scenePlayer.getUserID();

        return 0;
    }

    public SceneTeam getTeam()
    {
        return team;
    }

    public int getSpeed()
    {
        if (team != null)
            return team.getTeamSpeed();

        return 0;
    }

    public int getHeroID()
    {
        if (team != null)
            return team.getHeroID();

        return 0;
    }

    public int getArmyType()
    {
        return sceneArmyInfo.getArmyType();
    }

    public byte getArmyState()
    {
        return sceneArmyInfo.getArmyState();
    }

    public void setPaths(List<Integer> paths)
    {
        this.paths = paths;
    }

    /**
     * 取的寻路路径
     * 
     * @param startField
     * @param isAll
     * @return
     */
    public List<Integer> getPathList(int startField, boolean isAll)
    {
        List<Integer> list = new ArrayList<>();
        int begin = -1;
        int end = -1;

        if (sceneArmyInfo.getArmyState() == ArmyStateType.ARMY_MARCH)
        {
            if (isAll)
            {
                list.addAll(paths);
            }
            else
            {
                // 排除起始2个
                for (int i = 2; i < paths.size(); i++)
                {
                    if (paths.get(i) == startField)
                    {
                        begin = i;
                        break;
                    }
                }

                if (begin >= 2)
                {
                    end = begin + GamePropertiesComponent.PATH_COUNT;
                    // 排除最后一个目的点，行军停止在前一个点
                    end = end > paths.size() - 1 ? paths.size() - 1 : end;
                }
                else
                {
                    begin = 0;
                    end = 0;
                }

                list.addAll(paths.subList(begin, end));
            }
        }

        if (sceneArmyInfo.getArmyState() == ArmyStateType.ARMY_RETURN)
        {
            if (isAll)
            {
                list.addAll(paths);
                Collections.reverse(list);
            }
            else
            {
                // 从倒数第2个开始
                for (int i = paths.size() - 2; i >= 0; i--)
                {
                    if (paths.get(i) == startField)
                    {
                        end = i;
                        break;
                    }
                }

                // 排除起始2个格子
                if (end > 2)
                {
                    begin = end - GamePropertiesComponent.PATH_COUNT;
                    begin = begin >= 2 ? begin : 2;
                }
                else
                {
                    begin = 0;
                    end = 0;
                }

                list.addAll(paths.subList(begin, end));
                Collections.reverse(list);
            }
        }

        return list;
    }

    /**
     * 取得所有寻路路径(需要排除起始两个点 和 最终点)
     * 
     * @return
     */
    public List<Integer> getAllPathList()
    {
        List<Integer> list = new ArrayList<>();

        if (sceneArmyInfo.getArmyState() == ArmyStateType.ARMY_MARCH)
        {
            if (paths.size() > 3)
                list.addAll(paths.subList(2, paths.size() - 1));
        }

        if (sceneArmyInfo.getArmyState() == ArmyStateType.ARMY_RETURN)
        {
            if (paths.size() > 3)
                list.addAll(paths.subList(2, paths.size() - 1));
            Collections.reverse(list);
        }

        return list;
    }

    public int getCurrentFieldID()
    {
        return sceneArmyInfo.getCurrentFieldID();
    }

    public int getTargetFieldID()
    {
        return sceneArmyInfo.getTargetFieldID();
    }

    public int getMineID()
    {
        if (targetField != null)
            return targetField.getMineID();

        return 0;
    }

    public void setTargetField(WorldField targetField)
    {
        this.targetField = targetField;
    }

    public void setStopField(WorldField stopField)
    {
        this.stopField = stopField;
    }

    /**
     * 军队是否带兵
     * 
     * @return
     */
    public boolean isLeadSoldier()
    {
        return team.isLeadSoldier();
    }

    /**
     * 战斗损耗士兵
     * 
     * @param count
     */
    public void killSoldier(int count)
    {
        team.killSoldier(count);
    }

    /***********************************************************************************/

    /**
     * 取得侦查动作时间
     * 
     * @return
     */
    public int getActionTime()
    {
        // 侦查时间
        if (sceneArmyInfo.getArmyType() == ArmyActionType.ARMY_EXPLORE)
        {
            // 侦查难度
            int actionValue = 1000;
            if (targetField != null && targetField.getGroup() != null)
                actionValue = targetField.getGroup().getGroupBean().getExploreValue();

            // 侦查效率
            int actionEffect = team.getHero().getInEffect();
            // 侦查动作时间
            int actionTime = actionValue / actionEffect;

            return actionTime;
        }

        // 开荒时间
        if (sceneArmyInfo.getArmyType() == ArmyActionType.ARMY_DEVELOP_AUTO)
        {
            // 分组土地难度
            int actionValue = 1000;
            if (targetField != null && targetField.getGroup() != null)
                actionValue = targetField.getGroup().getGroupBean().getExploreValue();
            // 侦查效率
            int actionEffect = team.getHero().getInEffect();
            // 持续时间
            int actionTime = actionValue / actionEffect;

            return actionTime;
        }

        // 矿点资源采集时间
        if (sceneArmyInfo.getArmyType() == ArmyActionType.ARMY_MINE)
        {
            int mineID = getMineID();
            MineBean mineBean = MineBeanFactory.getMineBean(mineID);
            if (mineBean != null)
            {
                return mineBean.getExploreTime();
            }
        }

        return 0;
    }

    /**
     * 取得行军的时间(单程)
     * 
     * @return
     */
    public int getMarchTime()
    {
        // 排除起始2个、结束1个格子和行军方式减少1个格子（从格子中点开始到格子的中点，减少了一个格子）
        if (paths.size() <= 4)
            return 0;

        // 排除首尾的起始2、结束点1，排除格子1，行军是停止在倒数第二点中心
        int count = paths.size() - 4;
        int distance = count * GamePropertiesComponent.WORLD_CELL_RADIUS;

        // 行军速度
        // 行军时间
        int speed = team.getTeamSpeed();
        int marchTime = distance / speed;
        return marchTime;
    }

    /**
     * 取得任务总时间
     * 
     * @return
     */
    public int getTotalTime()
    {
        int total = 0;
        // 迷雾探索队伍
        if (sceneArmyInfo.getArmyType() == ArmyActionType.ARMY_EXPLORE)
        {
            total = getMarchTime() + getActionTime();
            return total;
        }

        // 开荒队伍
        if (sceneArmyInfo.getArmyType() == ArmyActionType.ARMY_DEVELOP_AUTO)
        {
            total = getMarchTime() + getActionTime();
            return total;
        }

        // 占领土地队伍
        if (sceneArmyInfo.getArmyType() == ArmyActionType.ARMY_CAPTURE)
        {
            total = getMarchTime() * 2 + getActionTime();
            return total;
        }

        // 矿点采集队伍
        if (sceneArmyInfo.getArmyType() == ArmyActionType.ARMY_MINE)
        {
            total = getMarchTime() * 2 + getActionTime();
            return total;
        }

        total = getMarchTime() * 2 + getActionTime();
        return total;
    }

    /**
     * 取得军队当前状态到下一个状态的剩余时间
     * 
     * @return
     */
    public int getStateLeftTime()
    {
        // 上次状态更新到现在已经流逝的时间
        int time = (int) ((new Date().getTime() - sceneArmyInfo.getStateUpdateTime().getTime()) / 1000);
        // 状态剩余时间
        int leftTime = 0;
        if (getArmyState() == ArmyStateType.ARMY_MARCH)
            leftTime = getMarchTime() - time;
        if (getArmyState() == ArmyStateType.ARMY_ACTION)
            leftTime = getActionTime() - time;
        if (getArmyState() == ArmyStateType.ARMY_RETURN)
            leftTime = getMarchTime() - time;

        leftTime = leftTime < 0 ? 0 : leftTime;

        return leftTime;
    }

    /**
     * 取得军队行动的总剩余时间
     * 
     * @return
     */
    public int getAllLeftTime()
    {
        int total = getTotalTime();
        long time = System.currentTimeMillis() - sceneArmyInfo.getCreateTime().getTime();
        int left = (int) (total - time);
        left = left < 0 ? 0 : left;
        return left;
    }

    /**
     * 军队行进
     * 
     * @param time
     */
    public void update(long time, int dt)
    {
        armyMarch(time);

        ckeckBattle();

        armyAction(time);

        armyStay(time);

        armyReturn(time);

        armyFinish(time);
    }

    /**
     * 检查军队战斗
     */
    private void ckeckBattle()
    {
        if (isLeadSoldier() == false)
            return;

        List<SceneBaseArmy> armys = scenePlayer.getScene().getAllArmyList();

        for (SceneBaseArmy army : armys)
        {
            if (army != this && army.isLeadSoldier())
            {
                if (army.getCurrentFieldID() == this.getCurrentFieldID())
                {
                    if (armyBattle(army) == false)
                        break;
                }
            }
        }
    }

    /**
     * 队伍相遇战斗
     * 
     * @param army
     * @return 胜利:true
     */
    private boolean armyBattle(SceneBaseArmy army)
    {
        boolean result = false;
        result = scenePlayer.getArmyModule().battle(this, army);
        if (result == false)
        {
            sceneArmyInfo.setArmyState(ArmyStateType.ARMY_RETURN);
            sceneArmyInfo.setStateUpdateTime(new Date());
            GameCacheComponent.getRemoteScene().updateArmyInfo(sceneArmyInfo);

            sendStateChange(sceneArmyInfo.getArmyState(), sceneArmyInfo.getCurrentFieldID());
        }

        return result;
    }

    private void armyMarch(long time)
    {
        // 行军前进中
        if (sceneArmyInfo.getArmyState() != ArmyStateType.ARMY_MARCH)
            return;

        // 行军速度
        int speed = team.getTeamSpeed();
        // 时间（秒）
        float totalTime = (time - sceneArmyInfo.getStateUpdateTime().getTime()) / 1000.0f;
        // 已经行军的总路径
        float distance = speed * totalTime;
        // 已经行军过多少个格子
        float fieldIndex = distance / WorldField.getCell();
        // 总格子数（排除开始2、结束1、消耗1,共4个）
        int totalCellCount = paths.size() - 4;

        // 如果行军到最后一个格子，结束行军
        if (fieldIndex >= totalCellCount)
        {
            sceneArmyInfo.setCurrentFieldID(stopField.getFieldID());
            sceneArmyInfo.setArmyState(ArmyStateType.ARMY_ACTION);

            long stateFinishTime = sceneArmyInfo.getStateUpdateTime().getTime() + getMarchTime() * 1000;
            sceneArmyInfo.setStateUpdateTime(new Date(stateFinishTime));

            GameCacheComponent.getRemoteScene().updateArmyInfo(sceneArmyInfo);

            sendStateChange(ArmyStateType.ARMY_ACTION, sceneArmyInfo.getCurrentFieldID());
        }
        else
        {
            // 要加上起始的两个格子
            int current = (int) (fieldIndex + 2);
            int currentField = paths.get(current);
            if (currentField != sceneArmyInfo.getCurrentFieldID())
            {
                sceneArmyInfo.setCurrentFieldID(currentField);
                GameCacheComponent.getRemoteScene().updateArmyInfo(sceneArmyInfo);
                // 发送添加军队
                sendAddToView(scenePlayer.getGamePlayer(), scenePlayer.getScene(), currentField);
            }
        }

        PrintFactory.out("army-- totalTime:%s, totalCell:%s, delayTime:%s, currentIndex:%s, leftTime:%s, Field:%s, Path:%s",
                getMarchTime(), totalCellCount, totalTime, fieldIndex, getStateLeftTime(), getCurrentFieldID(), StringUtil.mergeInt(getAllPathList(), "->"));
    }

    private void armyAction(long time)
    {
        if (sceneArmyInfo.getArmyState() != ArmyStateType.ARMY_ACTION)
            return;

        int actionTime = getActionTime();
        int delay = (int) ((time - sceneArmyInfo.getStateUpdateTime().getTime()) / 1000);

        System.err.println("army action-- totalTime:" + actionTime + ",delayTime:" + delay);

        if (delay >= actionTime)
        {
            // 迷雾探索任务
            if (sceneArmyInfo.getArmyType() == ArmyActionType.ARMY_EXPLORE)
            {
                // 迷雾探索完成，添加区域ID
                scenePlayer.getAreaModule().addArmyFinishArea(sceneArmyInfo.getArmyParam());
            }
            else if (sceneArmyInfo.getArmyType() == ArmyActionType.ARMY_DEVELOP_AUTO)
            {
                // 自动开荒完成后，计算得分
                scenePlayer.getDevelopModule().developFinish(sceneArmyInfo.getArmyParam());
            }
            else if (sceneArmyInfo.getArmyType() == ArmyActionType.ARMY_CAPTURE)
            {
                // 目标土地
                WorldField field = scenePlayer.getScene().getField(sceneArmyInfo.getTargetFieldID());
                // 目标地块的玩家ID
                long captureUserID = field.getUserID();

                // 占领土地区块
                SceneAreaInfo areaInfo = new SceneAreaInfo();
                areaInfo.setCreateTime(new Date());
                areaInfo.setDevelopScore(0);
                areaInfo.setAreaID(field.getAreaID());
                areaInfo.setIsExist(true);
                areaInfo.setUserID(scenePlayer.getUserID());

                scenePlayer.getAreaModule().addOwnerArea(areaInfo);

                field.getArea().playerCaptureArea(areaInfo);

                CaptureFieldProtoOut.Builder builder = CaptureFieldProtoOut.newBuilder();
                builder.setOwnUserID(scenePlayer.getUserID());
                builder.setCaptureFieldID(field.getFieldID());
                builder.setCaptureUserID(captureUserID);
                builder.setCaptureAreaID(field.getAreaID());

                scenePlayer.sendMessage(UserCmdOutType.WORLD_REMOVE_AREA_RETURN_VALUE, builder);

                GamePlayer player = GamePlayerComponent.getPlayerByUserID(captureUserID);
                if (player != null)
                    player.sendMessage(UserCmdOutType.CAPTURE_FIELD_RETURN_VALUE, builder);
            }

            targetField = null;
            stopField = null;

            // 队伍状态修改
            team.changeStatus(ArmyActionType.ARMY_IDLE);

            sceneArmyInfo.setTargetFieldID(0);
            sceneArmyInfo.setArmyParam(0);
            sceneArmyInfo.setStopFieldID(0);
            // 状态改变为驻军状态
            long stateFinishTime = sceneArmyInfo.getStateUpdateTime().getTime() + actionTime * 1000;
            sceneArmyInfo.setStateUpdateTime(new Date(stateFinishTime));
            sceneArmyInfo.setArmyState(ArmyStateType.ARMY_STAY);

            GameCacheComponent.getRemoteScene().updateArmyInfo(sceneArmyInfo);

            sendStateChange(sceneArmyInfo.getArmyState(), sceneArmyInfo.getCurrentFieldID());
        }
    }

    private void armyStay(long time)
    {
        if (sceneArmyInfo.getArmyState() != ArmyStateType.ARMY_STAY)
            return;

        int delay = (int) ((time - sceneArmyInfo.getStateUpdateTime().getTime()) / 1000);

        System.err.println("army stay -- totalTime:" + GamePropertiesComponent.ARMY_STAY_TIME + ",delayTime:" + delay);

        if (delay >= GamePropertiesComponent.ARMY_STAY_TIME)
        {
            // 状态改变为返回状态
            long stateFinishTime = sceneArmyInfo.getStateUpdateTime().getTime() + GamePropertiesComponent.ARMY_STAY_TIME * 1000;
            sceneArmyInfo.setStateUpdateTime(new Date(stateFinishTime));
            sceneArmyInfo.setArmyState(ArmyStateType.ARMY_RETURN);
            GameCacheComponent.getRemoteScene().updateArmyInfo(sceneArmyInfo);

            sendStateChange(sceneArmyInfo.getArmyState(), sceneArmyInfo.getCurrentFieldID());

            changeCampReturn();
        }
    }

    private void armyReturn(long time)
    {
        if (sceneArmyInfo.getArmyState() != ArmyStateType.ARMY_RETURN)
            return;

        // 行军速度
        int speed = team.getTeamSpeed();
        float totalTime = (time - sceneArmyInfo.getStateUpdateTime().getTime()) / 1000.0f;
        // 总路径
        float distance = speed * totalTime;
        // 已经行军过多少个格子
        float fieldIndex = distance / WorldField.getCell();
        // 总格子数（结束2、消耗1,共3个）
        int totalCellCount = paths.size() - 3;

        // 如果行军到最后一个格子，结束行军
        if (fieldIndex >= totalCellCount)
        {
            sendStateChange(sceneArmyInfo.getArmyState(), sceneArmyInfo.getCurrentFieldID());

            sceneArmyInfo.setCurrentFieldID(0);
            sceneArmyInfo.setArmyState(ArmyStateType.ARMY_FINISH);
            sceneArmyInfo.setStateUpdateTime(new Date());
            GameCacheComponent.getRemoteScene().updateArmyInfo(sceneArmyInfo);
        }
        else
        {
            int current = (int) (fieldIndex);
            int currentField = paths.get(current);
            if (currentField != sceneArmyInfo.getCurrentFieldID())
            {
                sceneArmyInfo.setCurrentFieldID(currentField);
                GameCacheComponent.getRemoteScene().updateArmyInfo(sceneArmyInfo);

                // 发送添加军队
                sendAddToView(scenePlayer.getGamePlayer(), scenePlayer.getScene(), currentField);
            }
        }

        PrintFactory.out("army return -- totalTime:%s, totalCell:%s, delayTime:%s, currentIndex:%s, leftTime:%s, Field:%s, Path:%s",
                getMarchTime(), totalCellCount, totalTime, fieldIndex, getStateLeftTime(), getCurrentFieldID(), StringUtil.mergeInt(getAllPathList(), "->"));

    }

    private void armyFinish(long time)
    {
        // 军队任务结束
        if (sceneArmyInfo.getArmyState() != ArmyStateType.ARMY_FINISH)
            return;

        // 发送移除军队
        sendRemoveToView(scenePlayer.getGamePlayer(), scenePlayer.getScene(), getCurrentFieldID());
        scenePlayer.getArmyModule().removeSceneArmy(this);
    }

    /**
     * 销毁军队
     */
    public void destroy()
    {
        paths.clear();

        targetField = null;
        stopField = null;

        // 队伍状态修改
        team.changeStatus(ArmyActionType.ARMY_IDLE);

        // 信息初始化
        sceneArmyInfo.setIsExist(false);
        sceneArmyInfo.setTargetFieldID(0);
        sceneArmyInfo.setCurrentFieldID(0);
        sceneArmyInfo.setArmyState(ArmyStateType.ARMY_NONE);
        sceneArmyInfo.setArmyType(ArmyActionType.ARMY_IDLE);

        GameCacheComponent.getRemoteScene().updateArmyInfo(sceneArmyInfo);
    }

    /**
     * 队伍被驱散
     */
    public void driverOut(long userID)
    {
        sceneArmyInfo.setArmyState(ArmyStateType.ARMY_RETURN);
        sceneArmyInfo.setStateUpdateTime(new Date());

        GameCacheComponent.getRemoteScene().updateArmyInfo(sceneArmyInfo);

        WorldBreakUpProtoOut.Builder builder = WorldBreakUpProtoOut.newBuilder();
        builder.setResult(true);
        builder.setTeamID(getTeamID());
        builder.setUserID(userID);

        scenePlayer.sendMessage(UserCmdOutType.ARMY_BREAKUP_RETURN_VALUE, builder);
    }

    /**
     * 更改军队状态-驻军
     * 
     * @param state
     */
    public int changeStay()
    {
        sceneArmyInfo.setArmyState(ArmyStateType.ARMY_STAY);
        sceneArmyInfo.setStateUpdateTime(new Date());
        sceneArmyInfo.setTargetFieldID(0);
        sceneArmyInfo.setArmyParam(0);
        sceneArmyInfo.setStopFieldID(0);

        targetField = null;
        stopField = null;

        // 队伍状态修改
        team.changeStatus(ArmyActionType.ARMY_IDLE);

        GameCacheComponent.getRemoteScene().updateArmyInfo(sceneArmyInfo);

        return getCurrentFieldID();
    }

    /**
     * 更改军队状态-返回
     * 
     * @param state
     */
    public void changeCampReturn()
    {
        sceneArmyInfo.setArmyState(ArmyStateType.ARMY_RETURN);
        sceneArmyInfo.setStateUpdateTime(new Date());

        // 行军目标点
        int endFieldID = scenePlayer.getCityModule().getMainCity().getCityPos();
        // 行军开始点
        int marchStartFieldID = getCurrentFieldID();
        int passLevel = team.getHero().getPassLevel();
        List<Integer> paths = scenePlayer.getScene().findRealPath(scenePlayer.getUserID(), marchStartFieldID, endFieldID, passLevel);
        if (paths == null || paths.isEmpty() || paths.size() < 2)
            return;

        // 队伍行军路径
        this.paths = paths;
        // 行军结束点
        int marchStopFieldID = paths.get(paths.size() - 2);

        sceneArmyInfo.setTargetFieldID(endFieldID);
        sceneArmyInfo.setStopFieldID(marchStopFieldID);
        sceneArmyInfo.setCurrentFieldID(marchStartFieldID);
        sceneArmyInfo.setArmyState(ArmyStateType.ARMY_RETURN);

        // 添加侦查信息
        GameCacheComponent.getRemoteScene().updateArmyInfo(sceneArmyInfo);

        targetField = scenePlayer.getScene().getField(endFieldID);
        stopField = scenePlayer.getScene().getField(marchStopFieldID);

        // 队伍状态修改
        team.changeStatus(ArmyActionType.ARMY_RETURN);
    }

    /**
     * 事件更新状态处理
     * 
     * @param e
     */
    private void onTriggerChangeState(EventArg e)
    {
        TriggerChangeStateArg stateArg = (TriggerChangeStateArg) e;
    }

    /**
     * 军队详细信息
     * 
     * @return
     */
    public WorldArmyDetail.Builder getArmyDetail(boolean isAll)
    {
        WorldArmyDetail.Builder builder = WorldArmyDetail.newBuilder();
        builder.setUserID(sceneArmyInfo.getUserID());
        builder.setTargetFieldID(getTargetFieldID());
        int field = sceneArmyInfo.getCurrentFieldID();
        builder.addAllPaths(getPathList(field, isAll));
        builder.setCurrentFieldID(field);
        builder.setTeamID(getTeamID());
        builder.setHeroID(getHeroID());
        builder.setTeamSpeed(getSpeed());
        builder.setArmyType(getArmyType());
        builder.setState(getArmyState());
        builder.setMarchTime(getMarchTime());
        builder.setActionTime(getActionTime());
        builder.setStateLeftTime(getStateLeftTime());

        if (sceneArmyInfo.getArmyType() == ArmyActionType.ARMY_EXPLORE)
            builder.setExploreAreaID(sceneArmyInfo.getArmyParam());
        if (sceneArmyInfo.getArmyType() == ArmyActionType.ARMY_DEVELOP_AUTO)
            builder.setDevelopAreaID(sceneArmyInfo.getArmyParam());
        if (sceneArmyInfo.getArmyType() == ArmyActionType.ARMY_EVENT_ARMY)
            builder.setEventID(sceneArmyInfo.getArmyParam());

        return builder;
    }

    /**
     * 军队详细信息
     * 
     * @return
     */
    public WorldArmyReturnProtoOut.Builder getArmyReturnData()
    {
        WorldArmyReturnProtoOut.Builder builder = WorldArmyReturnProtoOut.newBuilder();
        builder.setTargetFieldID(getTargetFieldID());
        builder.setCurrentFieldID(sceneArmyInfo.getCurrentFieldID());
        builder.addAllPaths(getAllPathList());
        builder.setTeamID(getTeamID());
        builder.setHeroID(getHeroID());
        builder.setTeamSpeed(getSpeed());
        builder.setArmyType(getArmyType());
        builder.setMarchTime(getMarchTime());
        builder.setActionTime(getActionTime());

        if (sceneArmyInfo.getArmyType() == ArmyActionType.ARMY_EXPLORE)
            builder.setExploreAreaID(sceneArmyInfo.getArmyParam());
        if (sceneArmyInfo.getArmyType() == ArmyActionType.ARMY_DEVELOP_AUTO)
            builder.setDevelopAreaID(sceneArmyInfo.getArmyParam());
        if (sceneArmyInfo.getArmyType() == ArmyActionType.ARMY_EVENT_ARMY)
            builder.setEventID(sceneArmyInfo.getArmyParam());
        if (sceneArmyInfo.getArmyType() == ArmyActionType.ARMY_CAMP)
            builder.setCampFieldID(sceneArmyInfo.getArmyParam());

        return builder;
    }

    /**
     * 发送军队状态改变的信息
     * 
     * @param teamID
     * @param state
     */
    public void sendStateChange(byte state, int currentFieldID,List<Integer> paths)
    {
        WorldScene scene = scenePlayer.getScene();
        if (scene == null)
            return;

        ArmyStateProtoOut.Builder builder = ArmyStateProtoOut.newBuilder();
        builder.setArmyState(state);
        builder.setTeamID(getTeamID());
        builder.setUserID(scenePlayer.getUserID());
        builder.addAllPaths(paths);
        
        // 本人必发
        scenePlayer.sendMessage(UserCmdOutType.ARMY_STATE_RETURN_VALUE, builder);
        // 其他人发视野内
        scene.sendToView(UserCmdOutType.ARMY_STATE_RETURN_VALUE, builder, scenePlayer.getGamePlayer(), currentFieldID);
    }

    /**
     * 视野内添加军队
     * 
     * @param except
     * @param scene
     * @param fieldID
     */
    public void sendAddToView(GamePlayer except, WorldScene scene, int fieldID)
    {
        WorldArmyDetail.Builder detail = getArmyDetail(false);

        List<ScenePlayer> players = scene.getAllPlayer();
        for (ScenePlayer scenePlayer : players)
        {
            if (scenePlayer.getSceneViewModule().isFieldInView(fieldID))
            {
                if (!scenePlayer.getSceneViewModule().isArmyInView(getUserID(), getTeamID()))
                {
                    GamePlayer player = scenePlayer.getGamePlayer();
                    if (player != null && player != except)
                    {
                        ViewArmyUpdateProtoOut.Builder builder = ViewArmyUpdateProtoOut.newBuilder();
                        builder.setArmys(detail);
                        player.sendMessage(UserCmdOutType.VIEW_ADD_ARMY_VALUE, builder);
                    }
                }
            }
        }
    }

    /**
     * 视野内移除军队
     * 
     * @param except
     * @param scene
     * @param fieldID
     */
    public void sendRemoveToView(GamePlayer except, WorldScene scene, int fieldID)
    {
        ViewArmyRemoveProtoOut.Builder builder = ViewArmyRemoveProtoOut.newBuilder();
        builder.setUserID(getUserID());
        builder.setTeamID(getTeamID());

        List<ScenePlayer> players = scene.getAllPlayer();
        for (ScenePlayer scenePlayer : players)
        {
            if (scenePlayer.getSceneViewModule().isFieldInView(fieldID))
            {
                if (scenePlayer.getSceneViewModule().isArmyInView(getUserID(), getTeamID()))
                {
                    GamePlayer player = scenePlayer.getGamePlayer();
                    if (player != null && player != except)
                    {
                        player.sendMessage(UserCmdOutType.VIEW_REMOVE_ARMY_VALUE, builder);
                    }
                }
            }
        }
    }

}
