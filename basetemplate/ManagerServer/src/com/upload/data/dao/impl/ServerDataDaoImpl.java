package com.upload.data.dao.impl;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;

import com.upload.data.dao.IServerDataDao;
import com.upload.data.data.ServerData;
import com.upload.database.BaseDao;
import com.upload.database.DBParamWrapper;
import com.upload.database.DataExecutor;
import com.upload.database.pool.DBHelper;

/**
 * This file is generated by system automatically.Don't Modify It.
 *
 * @author System
 */
public class ServerDataDaoImpl extends BaseDao<ServerData> implements IServerDataDao
{
    public ServerDataDaoImpl(DBHelper helper)
    {
        super(helper);
    }

    @Override
    public boolean add(ServerData serverData)
    {
        boolean result = false;
        String sql = "insert into t_p_server(`ServerID`, `ServerName`, `Host`, `GamePort`, `WebPort`, `RegisterCount`, `State`) values(?, ?, ?, ?, ?, ?, ?);";
        DBParamWrapper params = new DBParamWrapper();
        params.put(Types.INTEGER, serverData.getServerID());
        params.put(Types.VARCHAR, serverData.getServerName());
        params.put(Types.VARCHAR, serverData.getHost());
        params.put(Types.INTEGER, serverData.getGamePort());
        params.put(Types.INTEGER, serverData.getWebPort());
        params.put(Types.INTEGER, serverData.getRegisterCount());
        params.put(Types.INTEGER, serverData.getState());
        result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
        return result;
    }

    @Override
    public boolean update(ServerData serverData)
    {
        boolean result = false;
        String sql = "update t_p_server set `ServerName`=?, `Host`=?, `GamePort`=?, `WebPort`=?, `RegisterCount`=?, `State`=? where `ServerID`=?;";
        DBParamWrapper params = new DBParamWrapper();
        params.put(Types.VARCHAR, serverData.getServerName());
        params.put(Types.VARCHAR, serverData.getHost());
        params.put(Types.INTEGER, serverData.getGamePort());
        params.put(Types.INTEGER, serverData.getWebPort());
        params.put(Types.INTEGER, serverData.getRegisterCount());
        params.put(Types.INTEGER, serverData.getState());
        params.put(Types.INTEGER, serverData.getServerID());
        result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
        return result;
    }

    @Override
    public boolean delete(ServerData serverData)
    {
        boolean result = false;
        String sql = "delete from t_p_server where `ServerID`=?;";
        DBParamWrapper params = new DBParamWrapper();
        params.put(Types.INTEGER, serverData.getServerID());
        result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
        return result;
    }

    @Override
    public boolean addOrUpdate(ServerData serverData)
    {
        boolean result = false;
        String sql = "insert into t_p_server(`ServerID`, `ServerName`, `Host`, `GamePort`, `WebPort`, `RegisterCount`, `State`) values(?, ?, ?, ?, ?, ?, ?) on DUPLICATE KEY update `ServerName`=?,`Host`=?,`GamePort`=?,`WebPort`=?,`RegisterCount`=?,`State`=?;";
        DBParamWrapper params = new DBParamWrapper();
        params.put(Types.INTEGER, serverData.getServerID());
        params.put(Types.VARCHAR, serverData.getServerName());
        params.put(Types.VARCHAR, serverData.getHost());
        params.put(Types.INTEGER, serverData.getGamePort());
        params.put(Types.INTEGER, serverData.getWebPort());
        params.put(Types.INTEGER, serverData.getRegisterCount());
        params.put(Types.INTEGER, serverData.getState());
        params.put(Types.VARCHAR, serverData.getServerName());
        params.put(Types.VARCHAR, serverData.getHost());
        params.put(Types.INTEGER, serverData.getGamePort());
        params.put(Types.INTEGER, serverData.getWebPort());
        params.put(Types.INTEGER, serverData.getRegisterCount());
        params.put(Types.INTEGER, serverData.getState());
        result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
        return result;
    }

    @Override
    public boolean deleteByKey(Object... ids)
    {
        boolean result = false;
        String sql = "delete from t_p_server where `ServerID`=?;";
        DBParamWrapper params = new DBParamWrapper();
        params.put(Types.INTEGER, ids[0]);
        result = getDBHelper().execNoneQuery(sql, params) > -1 ? true : false;
        return result;
    }

    @Override
    public ServerData getByKey(Object... ids)
    {
        String sql = "select * from t_p_server where `ServerID`=?;";
        DBParamWrapper params = new DBParamWrapper();
        params.put(Types.INTEGER, ids[0]);
        ServerData serverData = query(sql, params);
        return serverData;
    }

    @Override
    public List<ServerData> listAll()
    {
        String sql = "select * from t_p_server;";
        List<ServerData> serverDatas = queryList(sql);
        return serverDatas;
    }

    @Override
    public int[] addOrUpdateBatch(List<ServerData> serverDatas)
    {
        if (serverDatas == null || serverDatas.isEmpty())
            return new int[1];
        String sql = "insert into t_p_server(`ServerID`, `ServerName`, `Host`, `GamePort`, `WebPort`, `RegisterCount`, `State`) values(?, ?, ?, ?, ?, ?, ?) on DUPLICATE KEY update `ServerName`=?,`Host`=?,`GamePort`=?,`WebPort`=?,`RegisterCount`=?,`State`=?;";
        int[] effectedRows = getDBHelper().sqlBatch(sql, serverDatas, new DataExecutor<int[]>()
        {
            @Override
            public int[] execute(PreparedStatement statement, Object... objects) throws Exception
            {
                @SuppressWarnings("unchecked")
                List<ServerData> serverDatas = (List<ServerData>) objects[0];
                for (ServerData serverData : serverDatas)
                {
                    DBParamWrapper params = new DBParamWrapper();
                    params.put(Types.INTEGER, serverData.getServerID());
                    params.put(Types.VARCHAR, serverData.getServerName());
                    params.put(Types.VARCHAR, serverData.getHost());
                    params.put(Types.INTEGER, serverData.getGamePort());
                    params.put(Types.INTEGER, serverData.getWebPort());
                    params.put(Types.INTEGER, serverData.getRegisterCount());
                    params.put(Types.INTEGER, serverData.getState());
                    params.put(Types.VARCHAR, serverData.getServerName());
                    params.put(Types.VARCHAR, serverData.getHost());
                    params.put(Types.INTEGER, serverData.getGamePort());
                    params.put(Types.INTEGER, serverData.getWebPort());
                    params.put(Types.INTEGER, serverData.getRegisterCount());
                    params.put(Types.INTEGER, serverData.getState());
                    statement = getDBHelper().prepareCommand(statement, params.getParams());
                    statement.addBatch();
                }
                return statement.executeBatch();
            }
        });
        return effectedRows;
    }

    @Override
    public int[] deleteBatch(List<ServerData> serverDatas)
    {
        String sql = "delete from t_p_server where `ServerID`=?;";
        int[] effectedRows = getDBHelper().sqlBatch(sql, serverDatas, new DataExecutor<int[]>()
        {
            @Override
            public int[] execute(PreparedStatement statement, Object... objects) throws Exception
            {

                @SuppressWarnings("unchecked")
                List<ServerData> serverDatas = (List<ServerData>) objects[0];
                for (ServerData serverData : serverDatas)
                {
                    DBParamWrapper params = new DBParamWrapper();
                    params.put(Types.INTEGER, serverData.getServerID());
                    statement = getDBHelper().prepareCommand(statement, params.getParams());
                    statement.addBatch();
                }
                return statement.executeBatch();
            }
        });
        return effectedRows;
    }

    @Override
    public ServerData rsToEntity(ResultSet rs) throws SQLException
    {
        ServerData serverData = new ServerData();
        serverData.setServerID(rs.getInt("ServerID"));
        serverData.setServerName(rs.getString("ServerName"));
        serverData.setHost(rs.getString("Host"));
        serverData.setGamePort(rs.getInt("GamePort"));
        serverData.setWebPort(rs.getInt("WebPort"));
        serverData.setRegisterCount(rs.getInt("RegisterCount"));
        serverData.setState(rs.getInt("State"));
        return serverData;
    }

}
