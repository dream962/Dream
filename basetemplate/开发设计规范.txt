
一、代码格式
	代码格式化统一，采用项目根目录下的Fight_Code_Formatter.xml和Fight_Code_Templates.xml文件设置的格式。

	ProtoBuffer的文件格式，按照样式统一书写，方便客户端的查询和开发。

二、命名规范
	统一的驼峰式命名规范
	属性信息小写
	方法名首字母大写
	枚举信息首字母大写
	静态变量大写

三、开发设计规范
	游戏开发设计中，尽量遵守组件式开发，不同的单一逻辑的功能。
	
	游戏基础组件类统一继承AbstractComponent类，通过ComponentManager管理，主要涉及到游戏不同模块的中使用的基础数据，表数据等等。

	游戏中的对象GamePlayer、Living等基础游戏对象，不同的逻辑功能分别放在一个单独的module里面处理，为了以后维护、查错、还有其他同事查阅修改方便，不同模块继承AbstractModule处理。

	开发中对于一下需求相似，功能相近的模块，尽量分开，及时逻辑重叠，也要copy出来分别作为自己单独模块里面的功能，保证各自独立的修改不会影响到其他模块，即使两个功能99%的相似。

四、数据库缓存开发
	数据数据层分 XXXBean（系统配置表对象）、XXXInfo(用户信息表对象)、IDao（到接口）、DaoImpl（接口实现）、DaoFactory（Dao工厂方法）、XXXBusiness(对外开发接口)，
	外部包访问数据层，只能访问到Business层，其他的内部层不可以访问。

	除了business层，需要手动编码，其他的层 可以通过代码生成工具自动生成，如果有特殊的查询或者更新等处理方式，需要扩展IDao接口，添加对应方法。

	不能用代码生成工具生成的数据bean，统一定义在com.data.data 数据包里面。

	数据库表设计字段，首字母大写。系统表用t_s_xxx格式，用户表用t_u_yyy格式，如果有个多个单词，要用分割线 _ 分割，如：t_s_server_config格式。

	数据库表设计，尽量满足设计三范式，不过对于具体需求，表设计可以冗余，方便策划配置。

	缓存服务器上的数据同步到数据库的操作，可以使用List或者Map并行处理。

	缓存服务器、游戏服务器上的数据各自一份，游戏内有更改直接修改内存，然后同步给缓存服务器。防止一旦缓存服务器宕机，不会影响到游戏服上现有的玩家数据。

五、缓存设计
	缓存的key命名规则，统一前缀：slg:玩家ID:主键类型:主键，比如：
	slg:12345:player
	slg:12345:account
	slg:12345:task:1
	slg:12345:task:2
	slg:12345:task:3

	玩家的数据，根据余数算法，分配到不同的db（0-10）里面，增删改查时，根据余数算法找到redis-client提取
